#!/bin/bash
date > /tmp/hook_run.log
echo "üöÄ [HOOK] Running pre-commit hook: Formatting and Quality Checks..."

# Pre-commit hook
# Handles code quality, formatting, and commit message validation

set -e

# Determine project type
if [ -f "pyproject.toml" ] || [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
    PROJECT_TYPE="python"
elif [ -f "CMakeLists.txt" ] || [ -f "meson.build" ]; then
    PROJECT_TYPE="cpp"
else
    echo "‚ö†Ô∏è  Unknown project type, skipping checks"
    exit 0
fi

echo "üì¶ Detected project type: $PROJECT_TYPE"

# Function to run Python checks
run_python_checks() {
    echo "üêç Running Python code quality checks..."

    # Check if ruff is available
    if command -v ruff >/dev/null 2>&1; then
        echo "üîß Running ruff linting and formatting..."
        ruff check --fix --exit-non-zero-on-fix .
        ruff format .
    else
        echo "‚ö†Ô∏è  ruff not found, skipping Python formatting"
    fi

    # Check if mypy is available
    if command -v mypy >/dev/null 2>&1; then
        echo "üîç Running mypy type checking..."
        mypy --strict --ignore-missing-imports src/ || echo "‚ö†Ô∏è  mypy completed with warnings"
    fi

    # Check for basic Python syntax errors
    echo "üîç Checking Python syntax..."
    find . -name "*.py" -path "./venv/*" -prune -o -name "*.py" -print0 | xargs -0 python -m py_compile
}

# Function to run C++ checks
run_cpp_checks() {
    echo "üîß Running C++ code quality checks..."
    echo "Current directory: $(pwd)"

    # Check if clang-format is available
    if command -v clang-format >/dev/null 2>&1; then
        echo "üìù Running clang-format check..."
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|hpp|cc|h)$')
        if [ -n "$STAGED_FILES" ]; then
            # Format files in place
            echo "$STAGED_FILES" | xargs clang-format -i -style=file
            echo "‚úÖ clang-format finished. Adding changes to git."
            # Add the formatted files to the staging area
            echo "$STAGED_FILES" | xargs git add
        else
            echo "‚ÑπÔ∏è No C++ files to format."
        fi
    else
        echo "‚ö†Ô∏è  clang-format not found, skipping C++ formatting"
    fi

    # Check if clang-tidy is available
    if command -v clang-tidy >/dev/null 2>&1; then
        echo "üîç Running clang-tidy static analysis..."
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|cc)$' | head -5)
        if [ -n "$STAGED_FILES" ]; then
            echo "$STAGED_FILES" | xargs -I {} clang-tidy {} --quiet --use-color || echo "‚ö†Ô∏è  clang-tidy completed with warnings"
        else
            echo "‚ÑπÔ∏è No C++ files to analyze with clang-tidy."
        fi
    fi
}

# Function to run universal checks
run_universal_checks() {
    echo "üîç Running universal checks..."

    # Check for trailing whitespace
    echo "üßπ Checking for trailing whitespace..."
    if grep -r '[[:space:]]$' --include="*.py" --include="*.cpp" --include="*.hpp" --include="*.h" --include="*.md" --include="*.yml" --include="*.yaml" --include="*.json" .; then
        echo "‚ùå Found trailing whitespace, fixing..."
        find . -type f \( -name "*.py" -o -name "*.cpp" -o -name "*.hpp" -o -name "*.h" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) -exec sed -i 's/[[:space:]]*$//' {} \;
    fi

    # Check for YAML syntax
    find . -name "*.yml" -o -name "*.yaml" | while read yaml_file; do
        if command -v python >/dev/null 2>&1; then
            python -c "import yaml; yaml.safe_load(open('$yaml_file'))" || echo "‚ö†Ô∏è  YAML syntax error in $yaml_file"
        fi
    done

    # Check for large files
    echo "üîç Checking for large files..."
    find . -type f -size +10M -not -path "./.git/*" -not -path "./venv/*" -not -path "./build/*" | while read file; do
        echo "‚ö†Ô∏è  Large file detected: $file ($(du -h "$file" | cut -f1))"
    done
}

# Function to validate commit message
validate_commit_message() {
    echo "üìù Validating commit message..."

    if [ -f "$COMMIT_MSG_FILE" ]; then
        local commit_msg=$(cat "$COMMIT_MSG_FILE")

        # Check for empty commit message
        if [ -z "$commit_msg" ]; then
            echo "‚ùå Commit message cannot be empty"
            exit 1
        fi

        # Check for minimum length
        if [ ${#commit_msg} -lt 5 ]; then
            echo "‚ùå Commit message too short (minimum 5 characters)"
            exit 1
        fi

        # Check for common patterns (optional)
        if echo "$commit_msg" | grep -E '^(fix|feat|docs|style|refactor|test|chore)(\(.+\))?: .+' >/dev/null; then
            echo "‚úÖ Commit message follows conventional commit format"
        else
            echo "‚ö†Ô∏è  Consider using conventional commit format: type(scope): description"
        fi

        echo "‚úÖ Commit message validation passed"
    fi
}

# Run checks based on project type
case $PROJECT_TYPE in
    "python")
        run_python_checks
        ;;
    "cpp")
        run_cpp_checks
        ;;
esac

run_universal_checks
validate_commit_message

echo "‚úÖ [HOOK] pre-commit hook finished successfully."