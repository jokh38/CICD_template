# GitHub Actions Self-Hosted Runner Configuration
# Windows Runner Settings for CICD Template System - Phase 6.2
# Version: 2.319.1

# Runner Configuration
runner:
  # Runner version
  version: "2.319.1"

  # Runner name (will be replaced with hostname during installation)
  name: "{{ hostname }}"

  # Runner user for Windows service
  user: "github-runner"

  # Installation directory
  install_dir: "C:\\actions-runner"

  # Configuration directory
  config_dir: "C:\\actions-runner\\config"

  # Log directory
  log_dir: "C:\\actions-runner\\_diag"

  # Working directory for jobs
  work_dir: "_work"

  # Default labels for the runner
  labels:
    - "self-hosted"
    - "windows"
    - "x64"
    - "x86_64"

  # Maximum number of parallel jobs
  max_jobs: 4

# Development Tools Configuration
development_tools:
  python:
    # Default Python version
    version: "3.11"

    # Pre-installed packages
    packages:
      - "ruff>=0.6.0"
      - "pytest>=7.4.0"
      - "pytest-cov>=4.1.0"
      - "mypy>=1.11.0"
      - "pre-commit>=3.5.0"
      - "black>=23.0.0"
      - "flake8>=6.0.0"
      - "isort>=5.12.0"
      - "bandit>=1.7.0"
      - "pipx"

    # Configuration files paths
    config_files:
      ruff: "{{ user_profile }}\\.config\\ruff\\ruff.toml"
      mypy: "{{ user_profile }}\\mypy.ini"
      precommit: "{{ config_dir }}\\pre-commit-config-template.yaml"

    # Ruff configuration
    ruff_config:
      target_version: "py310"
      line_length: 88
      indent_width: 4
      select_rules:
        - "E"    # pycodestyle errors
        - "W"    # pycodestyle warnings
        - "F"    # pyflakes
        - "I"    # isort
        - "N"    # pep8-naming
        - "UP"   # pyupgrade
        - "B"    # flake8-bugbear
        - "C4"   # flake8-comprehensions
        - "SIM"  # flake8-simplify
        - "S"    # flake8-bandit
      ignore_rules:
        - "E501"  # line too long
        - "S101"  # use of assert detected

  cpp:
    # Default C++ standard
    standard: "17"

    # Compiler configuration
    compiler: "msvc"
    build_system: "cmake"
    build_tool: "ninja"

    # Visual Studio configuration
    visual_studio:
      edition: "2022"
      workload: "VCTools"
      components:
        - "Microsoft.VisualStudio.Workload.VCTools"

    # Additional tools
    tools:
      - "cmake"
      - "ninja"
      - "llvm"  # clang-format, clang-tidy

    # Configuration files paths
    config_files:
      clang_format: "{{ user_profile }}\\.clang-format"
      clang_tidy: "{{ user_profile }}\\.clang-tidy"
      cmake_presets: "{{ config_dir }}\\CMakePresets.json"

    # clang-format configuration
    clang_format_config:
      based_on_style: "Google"
      language: "Cpp"
      standard: "c++17"
      column_limit: 100
      indent_width: 4
      use_tab: false
      pointer_alignment: "Left"
      reference_alignment: "Left"

    # clang-tidy configuration
    clang_tidy_config:
      checks: "*, -fuchsia-*, -google-*, -llvm-*, -modernize-use-trailing-return-type"
      warnings_as_errors: true
      header_filter_regex: ".*"

# sccache Configuration (Compilation Cache)
sccache:
  version: "0.7.7"
  install_path: "C:\\sccache"
  cache_size: "10G"
  max_frame_files: 10000
  idle_timeout: 7200  # 2 hours
  cache_dir: "{{ user_profile }}\\.cache\\sccache"

  # Cache storage
  storage:
    type: "local"  # local, s3, redis, gcs, memcached, azure

    # Local storage settings (default)
    local:
      dir: "{{ user_profile }}\\.cache\\sccache"

    # S3 storage settings (example configuration)
    # s3:
    #   bucket: "sccache-bucket"
    #   region: "us-west-2"
    #   endpoint: ""
    #   use_ssl: true
    #   key_prefix: "sccache/"

# Service Configuration
service:
  # Windows service configuration
  name_pattern: "actions.runner.*"
  display_name: "GitHub Actions Runner"
  description: "GitHub Actions self-hosted runner service"

  # Service startup configuration
  startup_type: "Automatic"
  delayed_start: true
  start_mode: "Own Process"

  # Service recovery configuration
  recovery:
    first_failure: "Restart Service"
    second_failure: "Restart Service"
    subsequent_failures: "Restart Service"
    reset_fail_count_after: "1 day"
    restart_delay: "1 minute"

  # Service dependencies
  dependencies:
    - "Tcpip"
    - "Dnscache"

# Environment Variables Configuration
environment:
  # System-level environment variables
  system:
    - name: "CMAKE_C_COMPILER_LAUNCHER"
      value: "sccache"
    - name: "CMAKE_CXX_COMPILER_LAUNCHER"
      value: "sccache"

  # User-level environment variables
  user:
    - name: "SCCACHE_DIR"
      value: "{{ user_profile }}\\.cache\\sccache"
    - name: "SCCACHE_CACHE_SIZE"
      value: "10G"
    - name: "SCCACHE_IDLE_TIMEOUT"
      value: "7200"
    - name: "SCCACHE_START_SERVER"
      value: "1"
    - name: "SCCACHE_NO_DAEMON"
      value: "0"

    # Python settings
    - name: "PYTHONPATH"
      value: "{{ user_profile }}\\AppData\\Roaming\\Python\\Python311\\site-packages"
    - name: "PIP_DISABLE_PIP_VERSION_CHECK"
      value: "1"

    # C++ settings
    - name: "CMAKE_EXPORT_COMPILE_COMMANDS"
      value: "ON"

# Performance Configuration
performance:
  # Resource limits
  resources:
    max_memory_percent: 80
    max_cpu_percent: 90
    max_disk_space_gb: 100

  # Cleanup settings
  cleanup:
    # Auto cleanup work directory after jobs
    cleanup_work_dir: true

    # Cleanup schedule (in cron-like format for Windows Task Scheduler)
    cleanup_schedule: "daily"

    # Keep work directory for debugging (hours)
    keep_work_dir_hours: 24

    # Maximum age for cached artifacts (days)
    max_cache_age_days: 30

# Security Configuration
security:
  # Runner user security
  user_security:
    password_never_expires: true
    user_cannot_change_password: true
    account_disabled: false

  # File permissions
  file_permissions:
    install_dir_permissions: "FullControl"
    config_dir_permissions: "FullControl"
    log_dir_permissions: "FullControl"

  # Service security
  service_security:
    logon_as_service: true
    service_account_type: "UserAccount"

  # Windows Firewall settings
  firewall:
    enabled: true
    allowed_programs:
      - name: "GitHub Actions Runner"
        path: "C:\\actions-runner\\run.exe"
        protocol: "TCP"
        ports: ["443"]  # HTTPS for GitHub API

# Monitoring and Logging
monitoring:
  # Log configuration
  logging:
    level: "Information"  # Verbose, Information, Warning, Error
    max_file_size_mb: 100
    max_files: 10
    log_format: "json"

  # Performance monitoring
  performance_monitoring:
    enabled: true
    collection_interval_seconds: 60
    metrics_to_collect:
      - "cpu_usage"
      - "memory_usage"
      - "disk_usage"
      - "network_io"
      - "job_duration"
      - "job_success_rate"

  # Health checks
  health_checks:
    enabled: true
    interval_seconds: 300  # 5 minutes
    timeout_seconds: 30
    checks:
      - "service_status"
      - "disk_space"
      - "memory_usage"
      - "network_connectivity"

# Network Configuration
network:
  # GitHub endpoints
  github_urls:
    - "https://github.com"
    - "https://api.github.com"
    - "https://github.githubusercontent.com"

  # Network timeout settings
  timeouts:
    connection_timeout_seconds: 30
    read_timeout_seconds: 300
    max_retries: 3
    retry_delay_seconds: 5

  # Proxy settings (if needed)
  proxy:
    enabled: false
    http_proxy: ""
    https_proxy: ""
    no_proxy: "localhost,127.0.0.1"

# Windows Service Management
service_management:
  # Service control commands
  commands:
    start: "C:\\actions-runner\\svc.cmd start"
    stop: "C:\\actions-runner\\svc.cmd stop"
    restart: "C:\\actions-runner\\svc.cmd restart"
    status: "Get-Service -Name 'actions.runner.*'"
    install: "C:\\actions-runner\\svc.cmd install"
    uninstall: "C:\\actions-runner\\svc.cmd uninstall"

  # Service dependencies
  dependencies:
    services:
      - "Tcpip"
      - "Dnscache"
      - "EventLog"

# Backup and Recovery
backup:
  # Configuration backup
  config_backup:
    enabled: true
    backup_path: "{{ config_dir }}\\backups"
    max_backups: 5
    schedule: "daily"

  # Cache backup (optional)
  cache_backup:
    enabled: false
    backup_path: "C:\\backups\\sccache"
    max_backups: 3
    schedule: "weekly"

# Integration Settings
integration:
  # GitHub integration
  github:
    api_url: "https://api.github.com"
    max_retries: 3
    retry_delay_seconds: 5
    timeout_seconds: 30

  # CICD Template integration
  cicd_templates:
    version: "v1.0"
    repo_url: "https://github.com/YOUR-ORG/github-cicd-templates"
    sync_enabled: true
    config_template: "runner-config-windows.yaml"

# Validation Rules
validation:
  # Required system packages
  required_tools:
    - "curl"
    - "git"
    - "python"
    - "cmake"
    - "ninja"

  # Minimum system requirements
  minimum_requirements:
    ram_gb: 8
    disk_space_gb: 20
    cpu_cores: 2
    os_version: "Windows 10/11 or Windows Server 2019+"

  # Performance benchmarks
  benchmarks:
    # Python linting should complete within 15 seconds
    python_lint_timeout_seconds: 15

    # C++ compilation of small project should complete within 3 minutes
    cpp_compile_timeout_seconds: 180

    # Cache hit rate should be above 50%
    min_cache_hit_rate_percent: 50

# Troubleshooting
troubleshooting:
  # Diagnostic tools
  diagnostic_commands:
    - name: "Check service status"
      command: "Get-Service -Name 'actions.runner.*'"
    - name: "View recent logs"
      command: "Get-ChildItem 'C:\\actions-runner\\_diag' | Sort-Object LastWriteTime -Descending | Select-Object -First 3"
    - name: "Test network connectivity"
      command: "Test-NetConnection -ComputerName github.com -Port 443"
    - name: "Check sccache stats"
      command: "sccache --show-stats"

  # Common issues and solutions
  common_issues:
    - issue: "Service won't start"
      solution: "Check if runner user has 'Log on as service' rights"
    - issue: "Can't connect to GitHub"
      solution: "Verify firewall settings and proxy configuration"
    - issue: "sccache not working"
      solution: "Check environment variables and PATH configuration"

# Windows-Specific Settings
windows_specific:
  # Windows features that should be enabled
  optional_features:
    - "Microsoft-Windows-NetFx3-OC-Package"
    - "Microsoft-Windows-NetFx4-US-OC-Package"
    - "Microsoft-Windows-NetFx4-OC-Package"

  # Windows PowerShell settings
  powershell:
    execution_policy: "RemoteSigned"
    modules_to_install:
      - "PowerShellGet"
      - "PackageManagement"

  # Windows Defender exclusions (if needed)
  defender_exclusions:
    paths:
      - "C:\\actions-runner"
      - "C:\\sccache"
      - "{{ user_profile }}\\.cache\\sccache"
    extensions:
      - ".exe"
      - ".dll"
      - ".py"
      - ".ps1"

# Update Management
updates:
  # Runner auto-update settings
  auto_update:
    enabled: false  # Set to true for automatic updates
    check_interval_hours: 24
    backup_before_update: true

  # Development tools update settings
  tools_update:
    enabled: false  # Manual updates recommended for stability
    schedule: "monthly"
    backup_before_update: true

# Compliance and Auditing
compliance:
  # Audit logging
  audit_logging:
    enabled: true
    log_file: "{{ log_dir }}\\audit.log"
    events_to_log:
      - "service_start_stop"
      - "job_execution"
      - "configuration_changes"
      - "user_logins"

  # Log retention
  log_retention_days: 90
  log_rotation: true

  # Security scanning
  security_scan:
    enabled: false
    scan_interval_hours: 24
    scan_paths:
      - "{{ install_dir }}"
      - "{{ config_dir }}"