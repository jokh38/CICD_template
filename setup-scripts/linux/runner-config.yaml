# GitHub Actions Self-Hosted Runner Configuration
# Linux Runner Settings for CICD Template System - Phase 6.2
# Version: 2.319.1

# Runner Configuration
runner:
  # Runner version
  version: "2.319.1"

  # Runner name (will be replaced with hostname during installation)
  name: "{{ hostname }}"

  # Runner user for Linux service
  user: "github-runner"

  # Installation directory
  install_dir: "/opt/actions-runner"

  # Configuration directory
  config_dir: "/opt/actions-runner/config"

  # Log directory
  log_dir: "/var/log/actions-runner"

  # Working directory for jobs
  work_dir: "_work"

  # Default labels for the runner
  labels:
    - "self-hosted"
    - "linux"
    - "x64"
    - "ubuntu"

  # Maximum number of parallel jobs
  max_jobs: 1

# Python Development Configuration
python:
  # Default Python version
  version: "3.10"

  # Pre-installed packages
  packages:
    - "ruff"
    - "pytest"
    - "pytest-cov"
    - "pytest-mock"
    - "mypy"
    - "pre-commit"
    - "black"
    - "isort"
    - "flake8"
    - "bandit"
    - "pipx"

  # Global configurations
  ruff_config:
    target_version: "py310"
    line_length: 88
    select_rules:
      - "E"    # pycodestyle errors
      - "W"    # pycodestyle warnings
      - "F"    # pyflakes
      - "I"    # isort
      - "N"    # pep8-naming
      - "UP"   # pyupgrade
      - "B"    # flake8-bugbear
      - "C4"   # flake8-comprehensions
      - "SIM"  # flake8-simplify
      - "S"    # flake8-bandit
    ignore_rules:
      - "E501"  # line too long
      - "S101"  # use of assert detected

# C++ Development Configuration
cpp:
  # Default C++ standard
  standard: "17"

  # Build system defaults
  build_system: "cmake"
  build_tool: "ninja"

  # Compilers
  compilers:
    primary: "gcc"
    secondary: "clang"

  # Testing frameworks
  testing_frameworks:
    - "gtest"
    - "catch2"

  # Static analysis tools
  static_analysis:
    clang_format_style: "Google"
    clang_tidy_checks:
      enable_all: true
      disable_patterns:
        - "fuchsia-*"
        - "google-*"
        - "llvm-*"
        - "modernize-use-trailing-return-type"
        - "readability-magic-numbers"
        - "cppcoreguidelines-avoid-magic-numbers"

# sccache Configuration (Compilation Cache)
sccache:
  version: "0.7.7"
  cache_size: "10G"
  max_frame_files: 10000
  idle_timeout: 7200  # 2 hours
  cache_dir: "${HOME}/.cache/sccache"

  # Cache storage (can be extended to use S3, Redis, etc.)
  storage:
    type: "local"  # local, s3, redis, gcs, memcached, azure

    # Local storage settings (default)
    local:
      dir: "${HOME}/.cache/sccache"

    # S3 storage settings (example)
    # s3:
    #   bucket: "sccache-bucket"
    #   region: "us-west-2"
    #   endpoint: ""
    #   use_ssl: true
    #   key_prefix: "sccache/"

# Performance Configuration
performance:
  # Resource limits
  resources:
    max_memory: "8G"
    max_cpu_cores: 4
    max_disk_space: "100G"

  # Cleanup settings
  cleanup:
    # Auto cleanup work directory after jobs
    cleanup_work_dir: true

    # Cleanup schedule
    cleanup_schedule: "0 3 * * 0"  # Weekly on Sunday at 3 AM

    # Keep work directory for debugging (hours)
    keep_work_dir_hours: 24

    # Maximum age for cached artifacts (days)
    max_cache_age_days: 30

# Security Configuration
security:
  # File permissions
  file_permissions:
    runner_files: "755"
    config_files: "644"
    executables: "755"

  # Security hardening
  hardening:
    # Disable unnecessary services
    disable_services:
      - "bluetooth"
      - "cups"

    # Firewall settings
    firewall:
      enabled: true
      allowed_ports:
        - "22/tcp"   # SSH
        - "443/tcp"  # HTTPS (for GitHub API)
        - "80/tcp"   # HTTP (if needed)

    # User restrictions
    user_restrictions:
      disable_password_auth: true
      enable_key_auth_only: true
      limit_sudo_access: true

# Monitoring and Logging
monitoring:
  # Log configuration
  logging:
    level: "INFO"  # DEBUG, INFO, WARNING, ERROR
    max_file_size: "100M"
    max_files: 10
    log_dir: "/var/log/actions-runner"

  # Metrics collection
  metrics:
    enabled: true
    collection_interval: 60  # seconds
    metrics_port: 9090

    # Metrics to collect
    collect:
      - "job_duration"
      - "job_success_rate"
      - "cache_hit_rate"
      - "cpu_usage"
      - "memory_usage"
      - "disk_usage"

  # Health checks
  health_check:
    enabled: true
    interval: 300  # 5 minutes
    timeout: 30
    endpoint: "/health"

# Network Configuration
network:
  # Proxy settings (if needed)
  proxy:
    enabled: false
    http_proxy: ""
    https_proxy: ""
    no_proxy: "localhost,127.0.0.1"

  # Rate limiting
  rate_limiting:
    enabled: true
    max_requests_per_minute: 60
    burst_size: 10

# Backup and Recovery
backup:
  # Configuration backup
  config_backup:
    enabled: true
    schedule: "0 1 * * 0"  # Weekly on Sunday at 1 AM
    backup_dir: "/opt/backups/runner-config"
    retention_days: 30

  # Cache backup (optional)
  cache_backup:
    enabled: false
    schedule: "0 4 * * 0"  # Weekly on Sunday at 4 AM
    backup_dir: "/opt/backups/sccache"
    retention_days: 7

# Integration Settings
integration:
  # Docker support
  docker:
    enabled: false
    version: "latest"
    privileged: false

  # Kubernetes support (if running in K8s)
  kubernetes:
    enabled: false
    namespace: "github-runners"
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "4"
        memory: "8Gi"

# Environment Variables
environment:
  # Default environment variables for all jobs
  variables:
    # Development tools
    CMAKE_C_COMPILER_LAUNCHER: "sccache"
    CMAKE_CXX_COMPILER_LAUNCHER: "sccache"
    CMAKE_EXPORT_COMPILE_COMMANDS: "ON"

    # sccache settings
    SCCACHE_DIR: "${HOME}/.cache/sccache"
    SCCACHE_CACHE_SIZE: "10G"
    SCCACHE_MAX_FRAME_FILES: "10000"
    SCCACHE_IDLE_TIMEOUT: "7200"
    SCCACHE_START_SERVER: "1"
    SCCACHE_NO_DAEMON: "0"

    # Python settings
    PYTHONPATH: "${HOME}/.local/lib/python3.10/site-packages"
    PIP_DISABLE_PIP_VERSION_CHECK: "1"

    # C++ settings
    CC: "gcc"
    CXX: "g++"
    CMAKE_BUILD_TYPE: "Release"

# Custom Scripts and Hooks
scripts:
  # Pre-job hook (runs before each job)
  pre_job_hook: |
    #!/bin/bash
    echo "Starting job preparation..."

    # Clear any leftover processes
    pkill -f "cmake\|make\|ninja" || true

    # Start sccache server
    sccache --start-server

    # Show cache stats
    sccache --show-stats

    echo "Job preparation complete"

  # Post-job hook (runs after each job)
  post_job_hook: |
    #!/bin/bash
    echo "Cleaning up after job..."

    # Show final sccache stats
    sccache --show-stats

    # Stop sccache server to free memory
    sccache --stop-server

    # Clean up temporary files
    find /tmp -name "tmp.*" -type d -mtime +1 -exec rm -rf {} + 2>/dev/null || true

    echo "Job cleanup complete"

  # Maintenance script (runs daily)
  maintenance_script: |
    #!/bin/bash
    echo "Starting daily maintenance..."

    # Update system packages (if configured)
    if [ "${AUTO_UPDATE_SYSTEM}" = "true" ]; then
        apt-get update && apt-get upgrade -y
    fi

    # Clean old cache files
    find ~/.cache -name "*" -type f -mtime +30 -delete 2>/dev/null || true

    # Rotate logs
    logrotate -f /etc/logrotate.d/actions-runner 2>/dev/null || true

    # Check disk space
    df -h | grep -E "(/$|/opt)"

    echo "Daily maintenance complete"

# Validation Rules
validation:
  # Required system packages
  required_packages:
    - "curl"
    - "jq"
    - "git"
    - "build-essential"
    - "python3"
    - "python3-pip"
    - "cmake"
    - "ninja-build"

  # Minimum system requirements
  minimum_requirements:
    ram: "4G"
    disk_space: "20G"
    cpu_cores: 2

  # Performance benchmarks
  benchmarks:
    # Python linting should complete within 10 seconds
    python_lint_timeout: 10

    # C++ compilation of small project should complete within 2 minutes
    cpp_compile_timeout: 120

    # Cache hit rate should be above 50%
    min_cache_hit_rate: 0.5

# Notification Settings
notifications:
  # Slack notifications (optional)
  slack:
    enabled: false
    webhook_url: ""
    channel: "#github-runners"

  # Email notifications (optional)
  email:
    enabled: false
    smtp_server: ""
    smtp_port: 587
    username: ""
    recipients: []

  # Notification triggers
  triggers:
    - "runner_offline"
    - "job_failure"
    - "disk_space_warning"
    - "cache_size_warning"