제공하신 파일 분석 결과, AI 자동화 워크플로를 발화(트리거)시키는 데 사용되는 **GitHub 레이블** 및 **이슈/PR 코멘트 명령어(슬래시 커맨드)**에 대한 정보를 확인했습니다.

이를 바탕으로 워크플로 발화 사용설명서를 다음과 같이 작성합니다.

---

## AI 자동화 워크플로 발화 사용설명서

CICD 템플릿 시스템의 AI 자동화 워크플로(Workflow)는 **GitHub 레이블** 또는 **이슈/PR 코멘트 명령어(슬래시 커맨드)**를 통해 발화됩니다.

### 1. 워크플로 종류 및 발화 조건 요약

| 워크플로 파일 | 목적 | 발화 조건 | 발화 레이블 (Label) | 발화 명령어 (Command) |
| :--- | :--- | :--- | :--- | :--- |
| `claude-code-pr-automation.yaml` | 주요 AI 자동화 및 PR 생성 | **이슈 레이블** 또는 **이슈/PR 코멘트** | `ai-automate` | `/claude refactor`, `/claude fix-bug`, `/claude add-feature`, `/claude generate-tests` |
| `claude-code-fix-ci.yaml` | CI 실패 자동 수정 | **CI 워크플로 실패** 또는 `workflow_dispatch` | 해당 레이블 없음 | `workflow_dispatch`를 통한 ID 지정 |
| `claude-code-review.yaml` | PR 코드 리뷰 | **PR 생성/동기화/재개** | `skip-ai-review` (제외 레이블) | `workflow_dispatch`를 통한 PR 번호 지정 |
| `claude-code-mcp-enhanced.yaml` | MCP 통합 AI 자동화 | **코멘트**, **레이블**, **워크플로 디스패치**, **CI 실패**, **PR 이벤트** | `ai-assist` | `/claude add-feature`, `/claude fix-bug`, `/claude refactor` 등 |
| `multi-project-automation.yaml` | 다중 프로젝트 분석 | **코멘트** 또는 `workflow_dispatch`, **스케줄** | 해당 레이블 없음 | `/workspace analyze`, `/workspace sync`, `/workspace audit` 등 |

---

## 2. 주요 발화 레이블 (Trigger Labels)

AI 자동화 워크플로를 시작하는 데 사용되는 주요 레이블은 다음과 같습니다.

### A. `ai-automate` (PR Automation)

* **사용 워크플로**: `claude-code-pr-automation.yaml`.
* **발화 조건**: **`issues`** 이벤트에서 해당 레이블이 지정될 때.
* **사용 목적**: AI에게 이슈 해결, 기능 추가, 리팩토링 등의 작업을 위임하고 PR 생성을 자동화합니다.

### B. `ai-assist` (MCP Enhanced Automation)

* **사용 워크플로**: `claude-code-mcp-enhanced.yaml`.
* **발화 조건**: 이슈 또는 PR에 **`ai-assist`** 레이블이 포함될 때.
* **사용 목적**: MCP(Model Context Protocol) 서버 통합을 포함한 고급 AI 자동화 기능을 사용합니다.

### C. `skip-ai-review` (Exclusion Label)

* **사용 워크플로**: `claude-code-review.yaml`.
* **발화 조건**: **`pull_request`** 이벤트에서 해당 레이블이 **지정되지 않은 경우**에만 리뷰를 수행합니다.
* **사용 목적**: 특정 PR에 대해 AI의 자동 리뷰를 건너뛰고 싶을 때 사용합니다.

---

## 3. 핵심 명령어 (Slash Commands)

이슈/PR 코멘트에 특정 명령어를 포함하여 워크플로를 발화시킬 수 있습니다.

### A. `/claude` 명령어 (Main AI Commands)

AI 자동화 워크플로의 핵심 명령어입니다. `claude-code-pr-automation.yaml` 및 `claude-code-mcp-enhanced.yaml` 워크플로에서 사용됩니다.

| 명령어 | 목적 | 예시 |
| :--- | :--- | :--- |
| **`/claude add-feature <내용>`** | 새로운 기능 추가 및 테스트 생성 | `/claude add-feature 사용자 프로필 조회 API를 추가할 것` |
| **`/claude fix-issue <내용>`** | 버그 수정 및 회귀 테스트 추가 | `/claude fix-issue setup-scripts/linux/core/install-system-deps.sh의 오타를 수정할 것` |
| **`/claude refactor-code <내용>`** | 코드 품질 표준에 따른 리팩토링 및 테스트 업데이트 | `/claude refactor-code src/utils.py의 로직을 간소화하고 타입 힌트를 적용할 것` |
| **`/claude security-audit <내용>`** | 보안 감사 수행 (MCP Enhanced 워크플로에서 사용 가능) | `/claude security-audit --secrets 명령을 실행하여 하드코딩된 비밀 키를 스캔할 것` |
| **`/claude code-review <내용>`** | 코드 리뷰 수행 (MCP Enhanced 워크플로에서 사용 가능) | `/claude code-review 이 PR의 로직 오류와 성능 병목 지점을 집중적으로 검토할 것` |

### B. `/workspace` 명령어 (Multi-Project Commands)

다중 프로젝트 환경 분석 및 관리를 위한 명령어입니다. `multi-project-automation.yaml` 워크플로에서 사용됩니다.

| 명령어 | 목적 | 예시 |
| :--- | :--- | :--- |
| **`/workspace analyze`** | 전체 워크스페이스 구조 및 종속성 분석 | `/workspace analyze. 전체 프로젝트의 종속성 그래프를 도식화하여 보고할 것.` |
| **`/workspace sync`** | 공통 설정(예: 린팅 규칙)을 프로젝트 간에 동기화 | `/workspace sync. 모든 Python 프로젝트의 ruff.toml 설정 파일을 최신 템플릿으로 동기화할 것.` |
| **`/workspace audit`** | 다중 프로젝트 환경의 종속성 감사 및 보안 취약점 점검 | `/workspace audit. 모든 프로젝트의 종속성(dependencies)을 감사하고 취약점을 보고할 것.` |

---

## 4. CI 실패 자동 수정 (Auto-Fix)

`claude-code-fix-ci.yaml` 워크플로는 별도의 레이블이나 코멘트 없이, 연관된 **CI 워크플로(`CI`, `Build`, `Test`)가 실패했을 때** 자동으로 발화됩니다.

* **자동 발화 조건**: `workflow_run` 이벤트의 `failed` 타입.
* **수행 동작**: 실패 로그를 분석하여 코드를 수정하고, PR을 생성/업데이트한 후, 수정 사항을 검증하기 위해 원래의 CI 워크플로를 다시 트리거합니다.