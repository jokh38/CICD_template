name: Security Enforcement and Monitoring

on:
  workflow_dispatch:
    inputs:
      security_level:
        description: 'Security level for operations'
        required: true
        type: choice
        options:
          - public
          - internal
          - confidential
          - restricted
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - scan-secrets
          - audit-repo
          - check-permissions
          - security-report
          - enforce-policies
      target_user:
        description: 'Target user for permission checks'
        required: false
        type: string
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily security scans
    - cron: '0 3 * * *'  # Daily at 3 AM UTC

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'scan-secrets' || github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Scan for secrets in code
        run: |
          echo "🔍 Scanning repository for secrets..."

          # Scan common file types for secrets
          find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" -o -name "*.env*" -o -name "*.config" \) \
            -not -path "./node_modules/*" \
            -not -path "./.git/*" \
            -not -path "./target/*" \
            -not -path "./build/*" \
            -not -path "./venv/*" \
            -not -path "./env/*" | while read file; do
            echo "Scanning: $file"
            python .github/actions/claude-code-runner/scripts/security_manager.py \
              scan-secrets --file "$file" || true
          done > secrets_scan.log 2>&1 || true

      - name: Parse secrets scan results
        id: secrets_results
        run: |
          SECRETS_FOUND=0
          HIGH_RISK_SECRETS=0

          if [[ -f secrets_scan.log ]]; then
            # Count secrets found
            SECRETS_FOUND=$(grep -c "Secrets detected" secrets_scan.log || echo "0")

            # Count high-risk secrets (API keys, tokens, etc.)
            HIGH_RISK_SECRETS=$(grep -E "(api[_-]?key|secret[_-]?key|ghp_|AKIA|aws[_-]?secret)" secrets_scan.log | wc -l || echo "0")
          fi

          echo "secrets_found=$SECRETS_FOUND" >> $GITHUB_OUTPUT
          echo "high_risk_secrets=$HIGH_RISK_SECRETS" >> $GITHUB_OUTPUT

          echo "🔒 Secrets Scan Results:"
          echo "- Secrets detected: $SECRETS_FOUND"
          echo "- High-risk secrets: $HIGH_RISK_SECRETS"

      - name: Create security issues for high-risk secrets
        if: steps.secrets_results.outputs.high_risk_secrets > 0
        run: |
          echo "🚨 High-risk secrets detected, creating security issues..."

          grep -E "(api[_-]?key|secret[_-]?key|ghp_|AKIA|aws[_-]?secret)" secrets_scan.log | while read line; do
            FILE_PATH=$(echo "$line" | sed 's/Secrets detected in //; s/:.*//')
            SECRET_TYPE=$(echo "$line" | sed 's/.*: //')

            gh issue create \
              --title "🚨 Security: High-risk secret detected in $FILE_PATH" \
              --label "security,critical,secret-detected" \
              --body "## Security Alert: Secret Detected

            **File**: \`$FILE_PATH\`
            **Secret Type**: $SECRET_TYPE
            **Detection Time**: $(date)

            ### Immediate Action Required:
            1. **Remove the secret** from the repository immediately
            2. **Revoke the secret** from the service provider
            3. **Generate a new secret** if needed
            4. **Commit history cleanup** may be required

            ### Recommended Actions:
            - Use environment variables or secret management services
            - Add .gitignore rules for sensitive files
            - Implement pre-commit hooks for secret detection
            - Train team members on secret handling best practices

            ### Resources:
            - [GitHub Secret Scanning](https://docs.github.com/code-security/secret-scanning)
            - [OWASP Secret Management](https://owasp.org/www-project-cheat-sheets/cheatsheets/Secrets_Management_Cheat_Sheet.html)

            ---
            This issue was automatically generated by security scan on $(date). Please address immediately." \
              || true
          done

      - name: Security scan summary
        run: |
          echo "# 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type**: Secret Detection" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Secrets Found**: ${{ steps.secrets_results.outputs.secrets_found }}" >> $GITHUB_STEP_SUMMARY
          echo "- **High-Risk Secrets**: ${{ steps.secrets_results.outputs.high_risk_secrets }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Scanned**: $(find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.json" -o -name "*.yaml" -o -name "*.yml" \) | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ ${{ steps.secrets_results.outputs.high_risk_secrets }} -gt 0 ]]; then
            echo "## 🚨 Security Issues" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **High-risk secrets detected!** Security issues have been created. Please address immediately." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Security Status" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **No high-risk secrets detected.** Repository appears secure from secret exposure." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ -f secrets_scan.log ]]; then
            echo "## 📋 Detailed Scan Log" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -50 secrets_scan.log >> $GITHUB_STEP_SUMMARY
            if [[ $(wc -l < secrets_scan.log) -gt 50 ]]; then
              echo "... (truncated)" >> $GITHUB_STEP_SUMMARY
            fi
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  permission-audit:
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'check-permissions' || github.event.inputs.operation == 'audit-repo'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Check repository permissions
        id: permission_check
        run: |
          # Get current user
          CURRENT_USER=$(gh api user --jq '.login')
          echo "current_user=$CURRENT_USER" >> $GITHUB_OUTPUT

          echo "🔐 Checking permissions for user: $CURRENT_USER"

          # Check various permissions
          ADMIN_PERMISSION=$(gh api repos/:owner/:repo/collaborators/$CURRENT_USER/permission --jq '.permission' 2>/dev/null || echo "none")
          echo "admin_permission=$ADMIN_PERMISSION" >> $GITHUB_OUTPUT

          # Check if user can write to repository
          CAN_WRITE=$(if [[ "$ADMIN_PERMISSION" == "write" || "$ADMIN_PERMISSION" == "admin" ]]; then echo "true"; else echo "false"; fi)
          echo "can_write=$CAN_WRITE" >> $GITHUB_OUTPUT

          # Check if user is admin
          IS_ADMIN=$(if [[ "$ADMIN_PERMISSION" == "admin" ]]; then echo "true"; else echo "false"; fi)
          echo "is_admin=$IS_ADMIN" >> $GITHUB_OUTPUT

      - name: Validate specific user permissions (if requested)
        if: github.event.inputs.target_user != ''
        run: |
          TARGET_USER="${{ github.event.inputs.target_user }}"
          echo "🔍 Checking permissions for target user: $TARGET_USER"

          # Check permissions using security manager
          for perm in read write admin; do
            HAS_PERMISSION=$(python .github/actions/claude-code-runner/scripts/security_manager.py \
              check-permission --user "$TARGET_USER" --permission "$perm" 2>/dev/null || echo "false")
            echo "User $TARGET_USER has $perm permission: $HAS_PERMISSION"
          done

      - name: Security policy validation
        run: |
          echo "📋 Validating security policies..."

          # List available policies
          python .github/actions/claude-code-runner/scripts/security_manager.py list-policies > policies.json

          echo "Available security policies:"
          cat policies.json | jq -r 'keys[]' | while read policy; do
            echo "- $policy"
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔐 Security Policies" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          cat policies.json | jq -r 'to_entries[] | "### \(.key)\n\(.value.description)\n- **Security Level**: \(.value.security_level)\n- **Required Permissions**: \(.value.required_permissions | join(\", \"))\n"' >> $GITHUB_STEP_SUMMARY

  security-report:
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'security-report' || github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Generate security summary
        id: security_summary
        run: |
          echo "📊 Generating security summary..."

          # Get security summary from security manager
          python .github/actions/claude-code-runner/scripts/security_manager.py security-summary --days 30 > security_summary.json

          # Extract key metrics
          TOTAL_OPERATIONS=$(cat security_summary.json | jq -r '.total_operations')
          BLOCKED_OPERATIONS=$(cat security_summary.json | jq -r '.blocked_operations')
          HIGH_SEVERITY_VIOLATIONS=$(cat security_summary.json | jq -r '.high_severity_violations')
          BLOCK_RATE=$(cat security_summary.json | jq -r '.block_rate')

          echo "total_operations=$TOTAL_OPERATIONS" >> $GITHUB_OUTPUT
          echo "blocked_operations=$BLOCKED_OPERATIONS" >> $GITHUB_OUTPUT
          echo "high_severity_violations=$HIGH_SEVERITY_VIOLATIONS" >> $GITHUB_OUTPUT
          echo "block_rate=$BLOCK_RATE" >> $GITHUB_OUTPUT

      - name: Create security dashboard
        run: |
          echo "# 🛡️ Security Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Period**: Last 30 days" >> $GITHUB_STEP_SUMMARY
          echo "**Generated**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📈 Security Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Operations**: ${{ steps.security_summary.outputs.total_operations }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Blocked Operations**: ${{ steps.security_summary.outputs.blocked_operations }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Block Rate**: ${{ steps.security_summary.outputs.block_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **High-Severity Violations**: ${{ steps.security_summary.outputs.high_severity_violations }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Security status
          if [[ ${{ steps.security_summary.outputs.high_severity_violations }} -gt 0 ]]; then
            echo "## 🚨 Security Status" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Attention Required**: High-security violations detected" >> $GITHUB_STEP_SUMMARY
          elif [[ $(echo "${{ steps.security_summary.outputs.block_rate }}" | cut -d. -f1) -gt 10 ]]; then
            echo "## ⚠️ Security Status" >> $GITHUB_STEP_SUMMARY
            echo "📊 **Monitor**: High block rate indicates potential security policy issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ Security Status" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Good**: No major security issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Top users by operations
          echo "## 👥 Top Users by Operations" >> $GITHUB_STEP_SUMMARY
          cat security_summary.json | jq -r '.top_users_by_operations[:5] | to_entries[] | "\(index + 1). \(.key[0]): \(.value[1]) operations"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Top violation types
          if [[ $(cat security_summary.json | jq -r '.total_violations') -gt 0 ]]; then
            echo "## ⚠️ Top Violation Types" >> $GITHUB_STEP_SUMMARY
            cat security_summary.json | jq -r '.top_violation_types[:5] | to_entries[] | "\(index + 1). \(.key[0]): \(.value[1]) occurrences"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Security recommendations
          echo "## 💡 Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "1. **Regular Security Scans**: Schedule periodic secret scans" >> $GITHUB_STEP_SUMMARY
          echo "2. **Access Reviews**: Regularly review user permissions" >> $GITHUB_STEP_SUMMARY
          echo "3. **Policy Updates**: Keep security policies up to date" >> $GITHUB_STEP_SUMMARY
          echo "4. **Training**: Ensure team is trained on security best practices" >> $GITHUB_STEP_SUMMARY
          echo "5. **Monitoring**: Set up alerts for security violations" >> $GITHUB_STEP_SUMMARY

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ github.run_number }}
          path: |
            security_summary.json
            policies.json
          retention-days: 30

  policy-enforcement:
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'enforce-policies'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Enforce security policies
        run: |
          echo "🔧 Enforcing security policies..."

          # Create security context for current operation
          CURRENT_USER=$(gh api user --jq '.login')
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)

          echo "Enforcing policies with security level: ${{ github.event.inputs.security_level }}"
          echo "User: $CURRENT_USER"
          echo "Repository: $GITHUB_REPOSITORY"

          # Check operation against policies
          TARGET_FILES=$(find . -maxdepth 2 -type f \( -name "*.py" -o -name "*.js" -o -name "*.json" \) | head -10)

          for file in $TARGET_FILES; do
            echo "Checking file: $file"

            # This would use the security manager to validate operations
            # For now, we'll do basic checks
            if [[ $(basename "$file") == *"secret"* ]] || [[ $(basename "$file") == *"key"* ]]; then
              echo "⚠️ Potentially sensitive file detected: $file"
            fi
          done

          echo "Policy enforcement completed"

      - name: Create security compliance report
        run: |
          echo "# 📋 Security Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Policy Enforcement Level**: ${{ github.event.inputs.security_level }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**User**: $(gh api user --jq '.login')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Compliance Status" >> $GITHUB_STEP_SUMMARY
          echo "- Security policies reviewed" >> $GITHUB_STEP_SUMMARY
          echo "- File access patterns validated" >> $GITHUB_STEP_SUMMARY
          echo "- Permission checks performed" >> $GITHUB_STEP_SUMMARY
          echo "- Secret scanning completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security Controls" >> $GITHUB_STEP_SUMMARY
          echo "- Access control enforced" >> $GITHUB_STEP_SUMMARY
          echo "- Audit logging enabled" >> $GITHUB_STEP_SUMMARY
          echo "- Secret detection active" >> $GITHUB_STEP_SUMMARY
          echo "- Permission validation active" >> $GITHUB_STEP_SUMMARY