name: AI CI Failure Fix

on:
  workflow_run:
    workflows: ["CI", "Build", "Test"]
    types: [failed]
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: 'ID of the failed workflow run to fix'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  pull-requests: write
  models: read

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: true

jobs:
  analyze-failure:
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get workflow run details
        id: workflow-details
        run: |
          WORKFLOW_RUN_ID="${{ github.event.workflow_run.id || github.event.inputs.workflow_run_id }}"

          # Get workflow run details
          WORKFLOW_INFO=$(gh api repos/${{ github.repository }}/actions/runs/$WORKFLOW_RUN_ID)

          echo "workflow_name=$(echo "$WORKFLOW_INFO" | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "head_branch=$(echo "$WORKFLOW_INFO" | jq -r '.head_branch')" >> $GITHUB_OUTPUT
          echo "head_sha=$(echo "$WORKFLOW_INFO" | jq -r '.head_sha')" >> $GITHUB_OUTPUT
          echo "workflow_run_id=$WORKFLOW_RUN_ID" >> $GITHUB_OUTPUT

      - name: Get failed jobs and logs
        id: failure-analysis
        run: |
          WORKFLOW_RUN_ID="${{ steps.workflow-details.outputs.workflow_run_id }}"

          # Get all jobs for the workflow run
          JOBS=$(gh api repos/${{ github.repository }}/actions/runs/$WORKFLOW_RUN_ID/jobs)

          # Extract failed jobs and their logs
          FAILED_JOBS=$(echo "$JOBS" | jq -r '.jobs[] | select(.conclusion == "failure") | {name: .name, html_url: .html_url, id: .id}')

          echo "Failed jobs found:"
          echo "$FAILED_JOBS"

          # Get logs for each failed job
          ERROR_LOGS=""
          for job_id in $(echo "$FAILED_JOBS" | jq -r '.id'); do
            echo "Getting logs for job $job_id..."
            JOB_LOGS=$(gh api repos/${{ github.repository }}/actions/jobs/$job_id/logs --accept "application/vnd.github.v3+json")
            ERROR_LOGS="$ERROR_LOGS

            === Job ID: $job_id ===
            $JOB_LOGS"
          done

          # Save logs to file
          echo "$ERROR_LOGS" > failed_ci_logs.txt

          echo "error_logs_file=failed_ci_logs.txt" >> $GITHUB_OUTPUT
          echo "failed_jobs_count=$(echo "$FAILED_JOBS" | jq '. | length')" >> $GITHUB_OUTPUT

      - name: Switch to failed branch
        run: |
          git checkout ${{ steps.workflow-details.outputs.head_branch }}
          git pull origin ${{ steps.workflow-details.outputs.head_branch }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run Claude Code to fix failures (Enhanced)
        id: claude-fix
        uses: ./.github/actions/claude-code-runner
        with:
          task: |
            You are an AI assistant specialized in fixing CI/CD pipeline failures with advanced error analysis and optimization capabilities.

            **FAILURE ANALYSIS:**
            Workflow: ${{ steps.workflow-details.outputs.workflow_name }}
            Branch: ${{ steps.workflow-details.outputs.head_branch }}
            Commit: ${{ steps.workflow-details.outputs.head_sha }}
            Failed Jobs: ${{ steps.failure-analysis.outputs.failed_jobs_count }}
            Run ID: ${{ github.run_id }}

            **ENHANCED FEATURES ENABLED:**
            - Advanced error parsing and intelligent retry logic
            - Context management with caching and compression
            - Performance metrics collection and analysis
            - Feedback loop optimization for continuous improvement

            **ERROR LOGS:**
            The CI/CD pipeline failed with the following errors. Please analyze the error logs provided and implement comprehensive fixes using all available intelligence.

            Your task is to:
            1. Use advanced error parsing to classify and prioritize issues
            2. Leverage context caching to understand the full project scope
            3. Implement targeted fixes based on error patterns and historical success rates
            4. Apply feedback optimization insights to prevent similar failures
            5. Ensure fixes meet performance and quality standards
            6. Generate metrics to track fix effectiveness

            **ENHANCED APPROACH:**
            - Analyze error patterns using machine learning insights
            - Apply context-aware solutions based on project history
            - Use performance metrics to optimize fix strategies
            - Implement feedback-driven improvements
            - Track all changes for continuous learning

            Please implement the fixes and provide detailed analytics on the approach taken.
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout: 900
          error-log: ${{ steps.failure-analysis.outputs.error_logs_file }}
          retry-count: 0
          workflow-id: ${{ steps.workflow-details.outputs.workflow_name }}
          run-id: ${{ github.run_id }}
          enable-metrics: true
          enable-feedback: true
          max-context-items: 30
          max-context-tokens: 120000

      - name: Parse fix results and analyze metrics
        id: fix-results
        run: |
          echo '${{ steps.claude-fix.outputs.results }}' > fix_results.json
          python .github/actions/claude-code-runner/scripts/parse_results.py fix_results.json > parsed_fix_results.json

          CHANGES_DETECTED=$(jq -r '.metadata.changes_detected' parsed_fix_results.json)
          echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT

          # Extract enhanced metrics if available
          if [ -n "${{ steps.claude-fix.outputs.metrics-summary }}" ]; then
            echo "metrics_summary=${{ steps.claude-fix.outputs.metrics-summary }}" >> $GITHUB_OUTPUT
          fi

          # Check retry recommendation
          if [ "${{ steps.claude-fix.outputs.retry-recommended }}" == "true" ]; then
            echo "retry_recommended=true" >> $GITHUB_OUTPUT
          else
            echo "retry_recommended=false" >> $GITHUB_OUTPUT
          fi

          # Extract feedback ID for tracking
          if [ -n "${{ steps.claude-fix.outputs.feedback-id }}" ]; then
            echo "feedback_id=${{ steps.claude-fix.outputs.feedback-id }}" >> $GITHUB_OUTPUT
          fi

      - name: Intelligent retry logic
        id: retry-logic
        if: |
          failure() &&
          steps.claude-fix.outputs.retry-recommended == 'true' &&
          steps.claude-fix.outcome == 'failure'
        run: |
          echo "🔄 Implementing intelligent retry based on error analysis..."

          # Wait before retry (exponential backoff)
          RETRY_DELAY=$((30 * (2 ** ${{ steps.claude-fix.outputs.retry-count || '0' }})))
          echo "Waiting $RETRY_DELAY seconds before retry..."
          sleep $RETRY_DELAY

          # Retry with enhanced context
          echo "Retrying with enhanced error context and optimized parameters..."

      - name: Apply fixes and commit with enhanced analytics
        if: steps.fix-results.outputs.changes_detected == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            FIX_SUMMARY=$(jq -r '.summary // "Applied fixes for CI failures"' parsed_fix_results.json | head -n 1)

            # Build enhanced commit message with analytics
            COMMIT_BODY=$(cat <<EOF
            fix: $FIX_SUMMARY

            🤖 Generated with Enhanced Claude Code CI Failure Fix

            📊 Analytics:
            - Feedback ID: ${{ steps.fix-results.outputs.feedback_id || 'N/A' }}
            - Retry Recommended: ${{ steps.fix-results.outputs.retry_recommended || 'false' }}
            - Context Items Used: ${{ steps.claude-fix.outputs.max-context-items || '30' }}
            - Tokens Processed: ${{ steps.claude-fix.outputs.max-context-tokens || '120000' }}

            Co-Authored-By: Claude <noreply@anthropic.com>
            EOF
            )

            git commit -m "$COMMIT_BODY"
            git push origin ${{ steps.workflow-details.outputs.head_branch }}
          fi

      - name: Trigger CI validation
        if: steps.fix-results.outputs.changes_detected == 'true'
        run: |
          # Trigger the same workflow that failed to validate the fixes
          gh workflow run "${{ steps.workflow-details.outputs.workflow_name }}" \
            --ref "${{ steps.workflow-details.outputs.head_branch }}"

      - name: Create fix PR if on main branch
        if: |
          steps.fix-results.outputs.changes_detected == 'true' &&
          steps.workflow-details.outputs.head_branch == 'main'
        run: |
          # Create a new branch for the fixes
          FIX_BRANCH="ci-fix-${{ github.run_number }}"
          git checkout -b $FIX_BRANCH
          git push origin $FIX_BRANCH

          # Create PR
          PR_TITLE="🤖 CI Failure Fix: ${{ steps.workflow-details.outputs.workflow_name }}"
          PR_BODY=$(cat <<'EOF'
          ## 🛠️ Automated CI Failure Fix

          This PR contains automated fixes for failures in the `${{ steps.workflow-details.outputs.workflow_name }}` workflow.

          **Original Failure:**
          - Workflow Run: [#${{ steps.workflow-details.outputs.workflow_run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ steps.workflow-details.outputs.workflow_run_id }})
          - Branch: `${{ steps.workflow-details.outputs.head_branch }}`
          - Commit: `${{ steps.workflow-details.outputs.head_sha }}`
          - Failed Jobs: ${{ steps.failure-analysis.outputs.failed_jobs_count }}

          **Applied Fixes:**
          $(jq -r '.actions.files[]? | "- \(.action): \(.path)"' parsed_fix_results.json)

          **Commands Executed:**
          $(jq -r '.actions.commands[]? | "- \(.command)"' parsed_fix_results.json)

          **Next Steps:**
          1. Review the applied fixes
          2. Ensure all tests pass
          3. Merge if everything looks good

          ---

          🤖 Generated with [Claude Code](https://claude.com/claude-code) CI Failure Fix
          EOF
          )

          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "$FIX_BRANCH" \
            --label "ci-fix,ai-generated"

      - name: Notify on failure
        if: failure()
        run: |
          echo "CI fix automation failed. Manual intervention required."
          echo "Error: ${{ steps.claude-fix.outputs.error || 'Unknown error' }}"