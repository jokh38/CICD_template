name: AI Code Automation

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Type of task to perform'
        required: true
        default: 'fix-bug'
        type: choice
        options:
          - refactor
          - fix-bug
          - add-feature
          - generate-tests
      task_description:
        description: 'Detailed description of the task'
        required: true
        type: string
  workflow_run:
    workflows: ["CI"]
    types: [failed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  models: read

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: true
  BASH_DEFAULT_TIMEOUT_MS: 30000

jobs:
  claude-automation:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'ai-automate')) ||
      (github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'ai-automate')) ||
      github.event_name == 'workflow_run'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Determine task
        id: task
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TASK_TYPE="${{ github.event.inputs.task_type }}"
            TASK_DESCRIPTION="${{ github.event.inputs.task_description }}"
          elif [ "${{ github.event_name }}" == "workflow_run" ]; then
            TASK_TYPE="fix-ci-failure"
            TASK_DESCRIPTION="Fix CI/CD pipeline failures that occurred in the previous workflow run"
          else
            # Extract task from issue or comment
            TASK_TYPE="general"
            TASK_DESCRIPTION="${{ github.event.issue.title || github.event.comment.body }}"
          fi

          echo "task_type=$TASK_TYPE" >> $GITHUB_OUTPUT
          echo "task_description=$TASK_DESCRIPTION" >> $GITHUB_OUTPUT

      - name: Run Claude Code
        id: claude
        uses: ./.github/actions/claude-code-runner
        with:
          task: |
            You are an AI assistant working on GitHub issue automation.

            Task Type: ${{ steps.task.outputs.task_type }}
            Description: ${{ steps.task.outputs.task_description }}

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Issue/PR Number: ${{ github.event.issue.number || github.event.pull_request.number }}

            Please analyze the codebase and implement the requested changes.
            Make sure to:
            1. Follow all coding standards and best practices
            2. Include tests where appropriate
            3. Update documentation if needed
            4. Create atomic, complete changes
            5. Consider the current project context and architecture
          anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout: 600
          add-dir: "src,docs,tests"

      - name: Parse Claude results
        id: results
        run: |
          echo '${{ steps.claude.outputs.results }}' > claude_results.json
          python .github/actions/claude-code-runner/scripts/parse_results.py claude_results.json > parsed_results.json

          # Set outputs for GitHub Actions
          SUCCESS=$(jq -r '.metadata.changes_detected' parsed_results.json)
          echo "changes_detected=$SUCCESS" >> $GITHUB_OUTPUT

      - name: Apply changes
        if: steps.results.outputs.changes_detected == 'true'
        run: |
          echo "Claude has suggested changes. Review parsed_results.json for details."
          cat parsed_results.json

      - name: Run validation
        id: validation
        run: |
          # Run project-specific validation
          if [ -f "pyproject.toml" ]; then
            echo "Running Python validation..."
            ruff check . --fix || echo "Linting completed with issues"
            pytest --tb=short || echo "Tests completed with failures"
          elif [ -f "CMakeLists.txt" ]; then
            echo "Running C++ validation..."
            cmake -B build -DCMAKE_BUILD_TYPE=Debug || echo "CMake configuration failed"
            cmake --build build || echo "Build completed with errors"
            ctest --test-dir build --output-on-failure || echo "Tests completed with failures"
          elif [ -f "package.json" ]; then
            echo "Running Node.js validation..."
            npm ci || echo "npm install completed with issues"
            npm run lint || echo "Linting completed with issues"
            npm test || echo "Tests completed with failures"
          else
            echo "No known project configuration found. Skipping automated validation."
          fi
        continue-on-error: true

      - name: Commit and push changes
        if: steps.results.outputs.changes_detected == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Create conventional commit message
            COMMIT_MSG=$(jq -r '.summary // "AI automated changes"' parsed_results.json | head -n 1)
            git commit -m "$(cat <<'EOF'
            $COMMIT_MSG

            🤖 Generated with Claude Code AI Automation

            Co-Authored-By: Claude <noreply@anthropic.com>
            EOF
            )"
            git push
          fi

      - name: Create or update PR
        if: steps.results.outputs.changes_detected == 'true'
        run: |
          PR_TITLE="AI Automation: ${{ steps.task.outputs.task_type }}"
          PR_BODY=$(cat <<'EOF'
          ## Summary

          This PR contains automated changes generated by Claude Code AI.

          **Task Type:** ${{ steps.task.outputs.task_type }}
          **Description:** ${{ steps.task.outputs.task_description }}

          **Changes Made:**
          $(jq -r '.actions.files[] | "- \(.action): \(.path)"' parsed_results.json)

          **Commands Run:**
          $(jq -r '.actions.commands[]? | "- \(.command)"' parsed_results.json)

          ---

          🤖 Generated with [Claude Code](https://claude.com/claude-code)
          EOF
          )

          # Create or update PR
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "ai-automation-${{ github.run_number }}" \
            --label "ai-generated" \
            --draft || true

      - name: Comment on issue
        if: github.event_name == 'issues' || github.event_name == 'issue_comment'
        run: |
          COMMENT_BODY=$(cat <<'EOF'
          ## 🤖 AI Automation Complete

          I've analyzed your request and implemented the necessary changes.

          **Changes Made:** $(jq -r '.metadata.files_count' parsed_results.json) files modified
          **Commands Run:** $(jq -r '.metadata.commands_count' parsed_results.json) commands executed

          [View the Pull Request](${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.pr.outputs.pr_number || '#' }})

          ---

          Generated with Claude Code AI Automation
          EOF
          )

          gh issue comment ${{ github.event.issue.number }} --body "$COMMENT_BODY"

      - name: Handle failures
        if: failure()
        run: |
          COMMENT_BODY=$(cat <<'EOF'
          ## ❌ AI Automation Failed

          The automated process encountered an error. Please review the logs and manually address the issue.

          **Error Details:**
          ```
          ${{ steps.claude.outputs.error || 'Unknown error' }}
          ```

          ---

          Generated with Claude Code AI Automation
          EOF
          )

          if [ "${{ github.event_name }}" == "issues" ] || [ "${{ github.event_name }}" == "issue_comment" ]; then
            gh issue comment ${{ github.event.issue.number }} --body "$COMMENT_BODY"
          fi