name: Python CI (Reusable)

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version'
        required: false
        type: string
        default: '3.10'

      working-directory:
        description: 'Working directory'
        required: false
        type: string
        default: '.'

      run-tests:
        description: 'Run pytest'
        required: false
        type: boolean
        default: true

      run-coverage:
        description: 'Run coverage'
        required: false
        type: boolean
        default: true

      runner-type:
        description: 'Runner type'
        required: false
        type: string
        default: 'self-hosted'

    outputs:
      test-result:
        description: 'Test result'
        value: ${{ jobs.test.outputs.result }}

jobs:
  lint:
    name: Lint with Ruff
    runs-on: ${{ inputs.runner-type }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install Ruff
        run: pip install ruff

      - name: Ruff check
        run: ruff check ${{ inputs.working-directory }}

      - name: Ruff format check
        run: ruff format --check ${{ inputs.working-directory }}

  test:
    name: Test
    runs-on: ${{ inputs.runner-type }}
    needs: lint
    outputs:
      result: ${{ steps.summary.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: pip install -e .[dev]

      - name: Run tests
        if: ${{ inputs.run-tests }}
        working-directory: ${{ inputs.working-directory }}
        run: pytest tests/ -v

      - name: Coverage
        if: ${{ inputs.run-coverage }}
        working-directory: ${{ inputs.working-directory }}
        run: pytest tests/ --cov=src --cov-report=xml

      - name: Upload coverage
        if: ${{ inputs.run-coverage }}
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml

      - name: Summary
        id: summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "result=✅ Passed" >> $GITHUB_OUTPUT
          else
            echo "result=❌ Failed" >> $GITHUB_OUTPUT
          fi
