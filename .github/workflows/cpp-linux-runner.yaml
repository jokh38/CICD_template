name: C++ Linux CI/CD Runner

on:
  workflow_call:
    inputs:
      build-type:
        description: 'CMake build type'
        required: false
        type: choice
        default: 'Release'
        options:
          - 'Debug'
          - 'Release'
          - 'RelWithDebInfo'
          - 'MinSizeRel'

      cpp-standard:
        description: 'C++ standard version'
        required: false
        type: choice
        default: '20'
        options:
          - '17'
          - '20'
          - '23'

      compiler:
        description: 'Compiler to use'
        required: false
        type: choice
        default: 'gcc'
        options:
          - 'gcc'
          - 'clang'

      build-system:
        description: 'Build system'
        required: false
        type: choice
        default: 'cmake'
        options:
          - 'cmake'
          - 'meson'

      enable-cache:
        description: 'Enable build caching with sccache'
        required: false
        type: boolean
        default: true

      enable-tests:
        description: 'Run unit tests'
        required: false
        type: boolean
        default: true

      enable-coverage:
        description: 'Generate code coverage report'
        required: false
        type: boolean
        default: false

      enable-static-analysis:
        description: 'Run static analysis (clang-tidy, cppcheck)'
        required: false
        type: boolean
        default: true

      enable-sanitizers:
        description: 'Run with sanitizers in Debug mode'
        required: false
        type: boolean
        default: false

      enable-formatting-check:
        description: 'Check code formatting with clang-format'
        required: false
        type: boolean
        default: true

      enable-memory-check:
        description: 'Run memory leak checks with Valgrind'
        required: false
        type: boolean
        default: false

      runner-type:
        description: 'GitHub Actions runner type'
        required: false
        type: choice
        default: 'self-hosted'
        options:
          - 'self-hosted'
          - 'ubuntu-latest'
          - 'ubuntu-22.04'
          - 'ubuntu-20.04'

      use-ninja:
        description: 'Use Ninja build system (faster builds)'
        required: false
        type: boolean
        default: true

      cmake-options:
        description: 'Additional CMake options'
        required: false
        type: string
        default: ''

      parallel-jobs:
        description: 'Number of parallel build jobs'
        required: false
        type: string
        default: '$(nproc)'

    secrets:
      CODECOV_TOKEN:
        description: 'Codecov token for coverage upload'
        required: false

    outputs:
      build-status:
        description: 'Build success status'
        value: ${{ jobs.build.outputs.status }}
      test-status:
        description: 'Test execution status'
        value: ${{ jobs.test.outputs.status }}
      coverage-badge:
        description: 'Coverage percentage badge'
        value: ${{ jobs.coverage.outputs.percentage }}

env:
  BUILD_DIR: build
  CCACHE_DIR: ~/.ccache
  SCCACHE_DIR: ~/.cache/sccache

jobs:
  # Setup and Dependencies
  setup:
    name: Setup Environment
    runs-on: ${{ inputs.runner-type }}
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      compiler-version: ${{ steps.compiler.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Build Environment
        id: compiler
        run: |
          if [ "${{ inputs.compiler }}" == "gcc" ]; then
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
            echo "version=$(gcc --version | head -n1 | grep -oP '\d+\.\d+')" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.compiler }}" == "clang" ]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
            echo "version=$(clang++ --version | head -n1 | grep -oP '\d+\.\d+')" >> $GITHUB_OUTPUT
          fi

      - name: Generate Cache Key
        id: cache-key
        run: |
          KEY="cpp-${{ runner.os }}-${{ inputs.compiler }}-${{ inputs.cpp-standard }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cpp', '**/*.hpp', '**/meson.build') }}"
          echo "key=$KEY" >> $GITHUB_OUTPUT

  # Dependencies Installation
  deps:
    name: Install Dependencies
    runs-on: ${{ inputs.runner-type }}
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            ninja-build \
            ${{ inputs.compiler == 'clang' && 'clang clang-tidy' || 'g++' }} \
            pkg-config \
            ${{ inputs.enable-static-analysis && 'cppcheck' || '' }} \
            ${{ inputs.enable-memory-check && 'valgrind' || '' }} \
            ${{ inputs.enable-coverage && 'lcov' || '' }} \
            python3 \
            python3-pip

      - name: Install sccache
        if: inputs.enable-cache
        run: |
          SCCACHE_VERSION="0.7.7"
          ARCH="x86_64-unknown-linux-musl"
          wget "https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-${ARCH}.tar.gz"
          tar xzf "sccache-v${SCCACHE_VERSION}-${ARCH}.tar.gz"
          sudo mv "sccache-v${SCCACHE_VERSION}-${ARCH}/sccache" /usr/local/bin/
          sudo chmod +x /usr/local/bin/sccache
          sccache --version

      - name: Install Conan (C++ Package Manager)
        if: inputs.build-system == 'cmake'
        run: |
          pip3 install conan
          conan profile detect --force

  # Configuration and Build
  configure:
    name: Configure Build
    runs-on: ${{ inputs.runner-type }}
    needs: [setup, deps]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup sccache
        if: inputs.enable-cache
        run: |
          echo "CMAKE_C_COMPILER_LAUNCHER=sccache" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=sccache" >> $GITHUB_ENV

      - name: Cache sccache
        if: inputs.enable-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            sccache-${{ runner.os }}-${{ inputs.compiler }}-

      - name: Cache CMake
        if: inputs.build-system == 'cmake'
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: cmake-${{ needs.setup.outputs.cache-key }}-${{ inputs.build-type }}
          restore-keys: |
            cmake-${{ needs.setup.outputs.cache-key }}-

      - name: Configure CMake
        if: inputs.build-system == 'cmake'
        run: |
          GENERATOR=""
          [ "${{ inputs.use-ninja }}" == "true" ] && GENERATOR="-G Ninja"

          CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${{ inputs.build-type }}"
          CMAKE_OPTS="$CMAKE_OPTS -DCMAKE_CXX_STANDARD=${{ inputs.cpp-standard }}"
          CMAKE_OPTS="$CMAKE_OPTS -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

          if [ "${{ inputs.enable-coverage }}" == "true" ] && [ "${{ inputs.build-type }}" == "Debug" ]; then
            CMAKE_OPTS="$CMAKE_OPTS -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage"
          fi

          if [ "${{ inputs.enable-sanitizers }}" == "true" ] && [ "${{ inputs.build-type }}" == "Debug" ]; then
            CMAKE_OPTS="$CMAKE_OPTS -DCMAKE_CXX_FLAGS='-fsanitize=address,undefined -g'"
            CMAKE_OPTS="$CMAKE_OPTS -DCMAKE_C_FLAGS='-fsanitize=address,undefined -g'"
          fi

          CMAKE_OPTS="$CMAKE_OPTS ${{ inputs.cmake-options }}"

          echo "Running: cmake -B ${{ env.BUILD_DIR }} $GENERATOR $CMAKE_OPTS"
          cmake -B ${{ env.BUILD_DIR }} $GENERATOR $CMAKE_OPTS

      - name: Configure Meson
        if: inputs.build-system == 'meson'
        run: |
          MESON_OPTS="--buildtype ${{ inputs.build-type }}"
          MESON_OPTS="$MESON_OPTS --cppstd=c++${{ inputs.cpp-standard }}"

          if [ "${{ inputs.enable-coverage }}" == "true" ] && [ "${{ inputs.build-type }}" == "debug" ]; then
            MESON_OPTS="$MESON_OPTS -Db_coverage=true"
          fi

          echo "Running: meson setup ${{ env.BUILD_DIR }} $MESON_OPTS"
          meson setup ${{ env.BUILD_DIR }} $MESON_OPTS

  # Build Step
  build:
    name: Build Project
    runs-on: ${{ inputs.runner-type }}
    needs: [setup, configure]
    outputs:
      status: ${{ steps.status.outputs.value }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup sccache
        if: inputs.enable-cache
        run: |
          echo "CMAKE_C_COMPILER_LAUNCHER=sccache" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=sccache" >> $GITHUB_ENV

      - name: Restore CMake Cache
        if: inputs.build-system == 'cmake'
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: cmake-${{ needs.setup.outputs.cache-key }}-${{ inputs.build-type }}
          restore-keys: |
            cmake-${{ needs.setup.outputs.cache-key }}-

      - name: Build with CMake
        if: inputs.build-system == 'cmake'
        run: |
          cmake --build ${{ env.BUILD_DIR }} -j${{ inputs.parallel-jobs }}

      - name: Build with Meson
        if: inputs.build-system == 'meson'
        run: |
          meson compile -C ${{ env.BUILD_DIR }} -j${{ inputs.parallel-jobs }}

      - name: sccache Statistics
        if: inputs.enable-cache
        run: |
          echo "=== sccache statistics ==="
          sccache --show-stats --verbose

      - name: Build Status
        id: status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "value=✅ Passed" >> $GITHUB_OUTPUT
          else
            echo "value=❌ Failed" >> $GITHUB_OUTPUT
          fi

  # Code Formatting Check
  formatting:
    name: Code Formatting
    runs-on: ${{ inputs.runner-type }}
    needs: setup
    if: inputs.enable-formatting-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check formatting with clang-format
        run: |
          find . -type f \( -name "*.cpp" -o -name "*.hpp" -o -name "*.h" -o -name "*.cc" -o -name "*.cxx" \) \
            -not -path "./${{ env.BUILD_DIR }}/*" \
            -exec clang-format --dry-run --Werror --style=file {} +

  # Static Analysis
  static-analysis:
    name: Static Analysis
    runs-on: ${{ inputs.runner-type }}
    needs: [setup, configure]
    if: inputs.enable-static-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore CMake Cache
        if: inputs.build-system == 'cmake'
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: cmake-${{ needs.setup.outputs.cache-key }}-${{ inputs.build-type }}

      - name: Run clang-tidy
        if: inputs.build-system == 'cmake' && inputs.compiler == 'clang'
        run: |
          find . -type f \( -name "*.cpp" -o -name "*.hpp" \) \
            -not -path "./${{ env.BUILD_DIR }}/*" \
            -exec clang-tidy --warnings-as-errors=* {} \;

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --error-exitcode=1 --xml --xml-version=2 \
            --suppress=missingIncludeSystem \
            --inline-suppr \
            src/ include/ 2> cppcheck-report.xml || true

      - name: Upload cppcheck results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cppcheck-report
          path: cppcheck-report.xml
          retention-days: 7

  # Testing
  test:
    name: Run Tests
    runs-on: ${{ inputs.runner-type }}
    needs: [build]
    outputs:
      status: ${{ steps.status.outputs.value }}
    if: inputs.enable-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Build Cache
        if: inputs.build-system == 'cmake'
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: cmake-${{ needs.setup.outputs.cache-key }}-${{ inputs.build-type }}

      - name: Run Tests with CTest
        if: inputs.build-system == 'cmake'
        run: |
          cd ${{ env.BUILD_DIR }}
          ctest --output-on-failure --verbose --parallel ${{ inputs.parallel-jobs }}

      - name: Run Tests with Meson
        if: inputs.build-system == 'meson'
        run: |
          meson test -C ${{ env.BUILD_DIR }} --verbose

      - name: Test Status
        id: status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "value=✅ Passed" >> $GITHUB_OUTPUT
          else
            echo "value=❌ Failed" >> $GITHUB_OUTPUT
          fi

  # Memory Checks
  memory-check:
    name: Memory Leak Detection
    runs-on: ${{ inputs.runner-type }}
    needs: [build]
    if: inputs.enable-memory-check && inputs.build-type == 'Debug'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Build Cache
        if: inputs.build-system == 'cmake'
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: cmake-${{ needs.setup.outputs.cache-key }}-${{ inputs.build-type }}

      - name: Run Valgrind
        run: |
          find ${{ env.BUILD_DIR }} -type f -executable -name "test_*" -o -name "*_test" | \
            head -1 | xargs valgrind --leak-check=full --error-exitcode=1

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ${{ inputs.runner-type }}
    needs: [build, test]
    outputs:
      percentage: ${{ steps.coverage.outputs.percentage }}
    if: inputs.enable-coverage && inputs.build-type == 'Debug'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Coverage Report
        run: |
          if [ "${{ inputs.build-system }}" == "cmake" ]; then
            cd ${{ env.BUILD_DIR }}
            lcov --capture --directory . --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            lcov --remove coverage.info '${{ env.BUILD_DIR }}/*' --output-file coverage.info
            lcov --list coverage.info
          fi

      - name: Generate Coverage Summary
        id: coverage
        run: |
          if [ -f "${{ env.BUILD_DIR }}/coverage.info" ]; then
            COVERAGE=$(lcov --summary ${{ env.BUILD_DIR }}/coverage.info 2>&1 | grep -oP 'lines......: \K[\d.]+%' | head -1)
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage: $COVERAGE"
          else
            echo "percentage=N/A" >> $GITHUB_OUTPUT
          fi

      - name: Upload Coverage to Codecov
        if: secrets.CODECOV_TOKEN
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.BUILD_DIR }}/coverage.info
          fail_ci_if_error: false
          verbose: true

  # Build Summary
  summary:
    name: Build Summary
    runs-on: ${{ inputs.runner-type }}
    needs: [setup, build, test, coverage, static-analysis, formatting]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "# C++ CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.outputs.status }} | Compiler: ${{ needs.setup.outputs.compiler-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.outputs.status }} | ${{ inputs.enable-tests || 'Tests disabled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.outputs.percentage || 'N/A' }} | ${{ inputs.enable-coverage || 'Coverage disabled' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ${{ inputs.enable-static-analysis && '✅ Enabled' || '⏭️ Disabled' }} | clang-tidy, cppcheck |" >> $GITHUB_STEP_SUMMARY
          echo "| Formatting Check | ${{ inputs.enable-formatting-check && '✅ Enabled' || '⏭️ Disabled' }} | clang-format |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ inputs.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **C++ Standard**: C++${{ inputs.cpp-standard }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Compiler**: ${{ inputs.compiler }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build System**: ${{ inputs.build-system }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache**: ${{ inputs.enable-cache && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY