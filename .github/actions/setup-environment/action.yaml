name: 'Setup Development Environment'
description: 'Setup development environment for Claude Code automation'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Claude Code CLI
      shell: bash
      run: |
        # Check if Claude Code CLI is already installed
        if ! command -v claude-code &> /dev/null; then
          echo "Installing Claude Code CLI..."
          npm install -g @anthropic-ai/claude-code
        else
          echo "Claude Code CLI already installed"
        fi

        # Verify installation
        claude-code --version

    - name: Install common tools
      shell: bash
      run: |
        # Install common development tools
        python -m pip install --upgrade pip

        # Install Python tools if project uses Python
        if [ -f "pyproject.toml" ] || [ -f "requirements.txt" ]; then
          echo "Installing Python development tools..."
          pip install ruff pytest mypy black flake8
        fi

        # Install Node.js tools if project uses Node.js
        if [ -f "package.json" ]; then
          echo "Installing Node.js tools..."
          npm install -g eslint prettier
        fi

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

    - name: Setup Claude directories
      shell: bash
      run: |
        # Create Claude configuration directory
        mkdir -p .github/claude/{commands,prompts/templates}

        # Create basic CLAUDE.md if it doesn't exist
        if [ ! -f ".github/claude/CLAUDE.md" ]; then
          cat > .github/claude/CLAUDE.md << 'EOF'
        # Claude AI Assistant Context

        ## Project Overview
        This is an automated development workflow powered by Claude Code AI.

        ## Development Guidelines
        - Follow existing code patterns and conventions
        - Write comprehensive tests for new functionality
        - Update documentation for API changes
        - Ensure all code passes linting and formatting checks

        ## Project Structure
        - `src/`: Source code files
        - `tests/`: Test files
        - `docs/`: Documentation
        - `.github/`: GitHub Actions and automation

        ## Quality Standards
        - All new code must have tests
        - Maintain backward compatibility
        - Follow security best practices
        - Write clear, commit messages

        ## Tools and Commands
        - Use `ruff` for Python linting and formatting
        - Use `pytest` for testing
        - Use `mypy` for type checking
        - Use pre-commit hooks for code quality

        ## Automated Workflows
        This project uses AI-powered automation for:
        - CI/CD failure fixes
        - Code reviews
        - Issue resolution
        - Documentation updates

        ---
        Generated by Claude Code AI Automation
        EOF
        fi