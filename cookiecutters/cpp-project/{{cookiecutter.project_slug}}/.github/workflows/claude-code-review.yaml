name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write

env:
  ANTHROPIC_API_KEY: {% raw %}{{ secrets.ANTHROPIC_API_KEY }}{% endraw %}
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: true

jobs:
  ai-review:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.pull_request.labels.*.name, 'skip-ai-review') &&
      (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: {% raw %}{{ secrets.GITHUB_TOKEN }}{% endraw %}
          fetch-depth: 0

      - name: Get PR details
        id: pr-details
        run: |
          PR_NUMBER="{% raw %}{{ github.event.pull_request.number || github.event.inputs.pr_number }}{% endraw %}""

          # Get PR details
          PR_INFO=$(gh pr view $PR_NUMBER --json title,body,baseRefName,headRefName,author,files,commits)

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$(echo "$PR_INFO" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "pr_body=$(echo "$PR_INFO" | jq -r '.body')" >> $GITHUB_OUTPUT
          echo "base_branch=$(echo "$PR_INFO" | jq -r '.baseRefName')" >> $GITHUB_OUTPUT
          echo "head_branch=$(echo "$PR_INFO" | jq -r '.headRefName')" >> $GITHUB_OUTPUT
          echo "author=$(echo "$PR_INFO" | jq -r '.author.login')" >> $GITHUB_OUTPUT
          echo "files_changed=$(echo "$PR_INFO" | jq -r '.files | length')" >> $GITHUB_OUTPUT
          echo "commits_count=$(echo "$PR_INFO" | jq -r '.commits | length')" >> $GITHUB_OUTPUT

          # Get changed files list
          echo "$PR_INFO" | jq -r '.files[].path' > changed_files.txt

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Claude Code CLI
        run: |
          pip install @anthropic-ai/claude-code

      - name: Get diff content
        id: diff-content
        run: |
          PR_NUMBER="{% raw %}{{ steps.pr-details.outputs.pr_number }}{% endraw %}"
          BASE_BRANCH="{% raw %}{{ steps.pr-details.outputs.base_branch }}{% endraw %}"

          # Get the diff
          git fetch origin $BASE_BRANCH
          DIFF_CONTENT=$(git diff origin/$BASE_BRANCH...HEAD --no-color)

          echo "$DIFF_CONTENT" > pr_diff.txt
          echo "diff_file=pr_diff.txt" >> $GITHUB_OUTPUT

      - name: Run Claude Code review
        id: claude-review
        run: |
          PR_TITLE="{% raw %}{{ steps.pr-details.outputs.pr_title }}{% endraw %}"
          PR_BODY="{% raw %}{{ steps.pr-details.outputs.pr_body }}{% endraw %}"
          AUTHOR="{% raw %}{{ steps.pr-details.outputs.author }}{% endraw %}"
          FILES_CHANGED="{% raw %}{{ steps.pr-details.outputs.files_changed }}{% endraw %}"
          COMMITS_COUNT="{% raw %}{{ steps.pr-details.outputs.commits_count }}{% endraw %}"
          BASE_BRANCH="{% raw %}{{ steps.pr-details.outputs.base_branch }}{% endraw %}"
          HEAD_BRANCH="{% raw %}{{ steps.pr-details.outputs.head_branch }}{% endraw %}"

          REVIEW_PROMPT="You are an expert code reviewer conducting a thorough review of a Pull Request.

**PULL REQUEST DETAILS:**
- Title: $PR_TITLE
- Author: @$AUTHOR
- Base Branch: $BASE_BRANCH
- Head Branch: $HEAD_BRANCH
- Files Changed: $FILES_CHANGED
- Commits: $COMMITS_COUNT

**PR DESCRIPTION:**
$PR_BODY

**CHANGED FILES:**
$(cat changed_files.txt | sed 's/^/- /')

**DIFF CONTENT:**
$(cat pr_diff.txt)

**TASK:**
Please conduct a comprehensive code review covering:

1. **Code Quality & Best Practices**
   - Adherence to coding standards
   - Code organization and structure
   - Performance considerations
   - Security implications

2. **Functionality & Logic**
   - Correctness of implementation
   - Edge cases and error handling
   - Business logic validation
   - Integration with existing code

3. **Testing & Documentation**
   - Test coverage adequacy
   - Test quality and relevance
   - Documentation updates
   - API documentation completeness

4. **Maintainability**
   - Code readability
   - Complexity analysis
   - Technical debt considerations
   - Future extensibility

5. **Specific Issues to Highlight:**
   - Critical bugs or security issues
   - Performance bottlenecks
   - Breaking changes
   - Missing error handling
   - Inconsistent patterns

**REVIEW FORMAT:**
Please provide your review in markdown format with:
- Overall assessment (LGTM, Request Changes, or Needs Revision)
- Key strengths of the PR
- Specific issues found (with file paths and line numbers when applicable)
- Suggestions for improvements
- Any blockers for merge

Focus on being constructive and providing actionable feedback.

**Project Context:**
This is a C++{{ cookiecutter.cpp_standard }} project named {{ cookiecutter.project_name }} with description: {{ cookiecutter.project_description }}."

          # Execute Claude Code review
          claude -p "$REVIEW_PROMPT" --timeout 600 > review_results.json 2>review_error.log || {
            echo "Claude review failed:"
            cat review_error.log
            exit 1
          }

          echo "results<<EOF" >> $GITHUB_OUTPUT
          cat review_results.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post review comment
        run: |
          PR_NUMBER="{% raw %}{{ steps.pr-details.outputs.pr_number }}{% endraw %}"
          PR_TITLE="{% raw %}{{ steps.pr-details.outputs.pr_title }}{% endraw %}"
          AUTHOR="{% raw %}{{ steps.pr-details.outputs.author }}{% endraw %}"
          FILES_CHANGED="{% raw %}{{ steps.pr-details.outputs.files_changed }}{% endraw %}"
          REVIEW_RESULTS="{% raw %}{{ steps.claude-review.outputs.results }}{% endraw %}"

          # Create review comment
          REVIEW_COMMENT=$(cat <<EOF
          ## 🤖 AI Code Review

          **Reviewed by:** Claude Code AI Assistant
          **PR:** #${PR_NUMBER} - $PR_TITLE
          **Author:** @$AUTHOR
          **Files Changed:** $FILES_CHANGED

          ---

          $REVIEW_RESULTS

          ---

          *This review was generated automatically by Claude Code AI. Please review the suggestions and address any concerns before merging.*

          🤖 Generated with [Claude Code](https://claude.com/claude-code)
          EOF
          )

          # Post as a review comment
          gh pr comment $PR_NUMBER --body "$REVIEW_COMMENT"

      - name: Check for critical issues
        id: critical-check
        run: |
          REVIEW_RESULTS="{% raw %}{{ steps.claude-review.outputs.results }}{% endraw %}"

          # Check for critical issues that should block merge
          if echo "$REVIEW_RESULTS" | grep -i -E "(critical|security|blocker|breaking change|do not merge)" > /dev/null; then
            echo "critical_issues=true" >> $GITHUB_OUTPUT
          else
            echo "critical_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Add blocking label if critical issues
        if: steps.critical-check.outputs.critical_issues == 'true'
        run: |
          PR_NUMBER="{% raw %}{{ steps.pr-details.outputs.pr_number }}{% endraw %}"
          gh pr edit $PR_NUMBER --add-label "needs-changes,ai-review-blocked"

      - name: Add approval label if no critical issues
        if: steps.critical-check.outputs.critical_issues == 'false'
        run: |
          PR_NUMBER="{% raw %}{{ steps.pr-details.outputs.pr_number }}{% endraw %}"
          gh pr edit $PR_NUMBER --add-label "ai-review-approved"

      - name: Handle review failures
        if: failure()
        run: |
          PR_NUMBER="{% raw %}{{ steps.pr-details.outputs.pr_number }}{% endraw %}"

          FAILURE_COMMENT=$(cat <<'EOF'
          ## ❌ AI Review Failed

          The automated AI review process encountered an error. Please proceed with manual review.

          **Error:** Review execution failed

          ---

          🤖 Generated with Claude Code AI
          EOF
          )

          gh pr comment $PR_NUMBER --body "$FAILURE_COMMENT"