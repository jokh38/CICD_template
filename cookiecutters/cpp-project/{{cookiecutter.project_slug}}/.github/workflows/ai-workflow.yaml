name: AI Code Automation

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Type of task to perform'
        required: true
        default: 'fix-bug'
        type: choice
        options:
          - refactor
          - fix-bug
          - add-feature
          - generate-tests
      task_description:
        description: 'Detailed description of the task'
        required: true
        type: string
  workflow_run:
    workflows: ["CI"]
    types: [failed]

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  ANTHROPIC_API_KEY: {% raw %}{{ secrets.ANTHROPIC_API_KEY {{\' }}{% endraw %}\'}}
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: true

jobs:
  claude-automation:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'ai-automate')) ||
      (github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'ai-automate')) ||
      github.event_name == 'workflow_run'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: {% raw %}{{ secrets.GITHUB_TOKEN {{\' }}{% endraw %}\'}}

      - name: Setup C++ Environment
        uses: jokh38/cpp-dev-setup@v1
        with:
          cpp-standard: {{cookiecutter.cpp_standard{{\'}}\'}}
          build-system: {{cookiecutter.build_system{{\'}}\'}}
          use-ninja: {{cookiecutter.use_ninja{{\'}}\'}}

      - name: Install Claude Code CLI
        run: |
          pip install @anthropic-ai/claude-code

      - name: Determine task
        id: task
        run: |
          if [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "workflow_dispatch" ]; then
            TASK_TYPE="{% raw %}{{ github.event.inputs.task_type {{\' }}{% endraw %}\'}}"
            TASK_DESCRIPTION="{% raw %}{{ github.event.inputs.task_description {{\' }}{% endraw %}\'}}"
          elif [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "workflow_run" ]; then
            TASK_TYPE="fix-ci-failure"
            TASK_DESCRIPTION="Fix CI/CD pipeline failures that occurred in the previous workflow run"
          else
            # Extract task from issue or comment
            TASK_TYPE="general"
            TASK_DESCRIPTION="{% raw %}{{ github.event.issue.title || github.event.comment.body {{\' }}{% endraw %}\'}}"
          fi

          echo "task_type=$TASK_TYPE" >> $GITHUB_OUTPUT
          echo "task_description=$TASK_DESCRIPTION" >> $GITHUB_OUTPUT

      - name: Setup project environment
        run: |
          # C++ project setup
          {% if cookiecutter.build_system == "cmake" %}
          cmake -B build -DCMAKE_BUILD_TYPE=Debug{% if cookiecutter.use_ninja == "yes" %} -G Ninja{% endif %}
          {% else %}
          meson setup build
          {% endif %}

      - name: Run Claude Code
        id: claude
        run: |
          TASK_TYPE="{% raw %}{{ steps.task.outputs.task_type {{\' }}{% endraw %}\'}}"
          DESCRIPTION="{% raw %}{{ steps.task.outputs.task_description {{\' }}{% endraw %}\'}}"

          # Build prompt based on task type
          case "$TASK_TYPE" in
            "refactor")
              PROMPT="Refactor the code according to quality standards: $DESCRIPTION

Please analyze the codebase and implement refactoring improvements:
1. Follow coding standards and best practices
2. Improve code organization and structure
3. Add appropriate tests
4. Update documentation if needed
5. Create atomic, complete changes

Project: {{cookiecutter.project_name{{\'}}\'}}
Language: C++{{cookiecutter.cpp_standard{{\'}}\'}}
Build System: {{cookiecutter.build_system | capitalize{{\'}}\'}}
Testing: {{cookiecutter.testing_framework | upper{{\'}}\'}}"
              ;;
            "fix-bug")
              PROMPT="Fix the following bug: $DESCRIPTION

Please analyze the codebase and implement a fix:
1. Identify the root cause of the issue
2. Implement a comprehensive fix
3. Add regression tests
4. Update documentation if needed
5. Ensure the fix doesn't break existing functionality

Project: {{cookiecutter.project_name{{\'}}\'}}
Language: C++{{cookiecutter.cpp_standard{{\'}}\'}}
Build System: {{cookiecutter.build_system | capitalize{{\'}}\'}}
Testing: {{cookiecutter.testing_framework | upper{{\'}}\'}}"
              ;;
            "add-feature")
              PROMPT="Implement the following feature: $DESCRIPTION

Please analyze the codebase and implement the new feature:
1. Design the feature implementation
2. Write clean, maintainable code
3. Add comprehensive tests
4. Update documentation
5. Follow the project's existing patterns

Project: {{cookiecutter.project_name{{\'}}\'}}
Language: C++{{cookiecutter.cpp_standard{{\'}}\'}}
Build System: {{cookiecutter.build_system | capitalize{{\'}}\'}}
Testing: {{cookiecutter.testing_framework | upper{{\'}}\'}}"
              ;;
            "generate-tests")
              PROMPT="Generate tests for: $DESCRIPTION

Please analyze the codebase and create comprehensive tests:
1. Identify areas that need test coverage
2. Write unit tests and integration tests
3. Test edge cases and error conditions
4. Ensure high test coverage
5. Follow testing best practices

Project: {{cookiecutter.project_name{{\'}}\'}}
Language: C++{{cookiecutter.cpp_standard{{\'}}\'}}
Build System: {{cookiecutter.build_system | capitalize{{\'}}\'}}
Testing: {{cookiecutter.testing_framework | upper{{\'}}\'}}"
              ;;
            *)
              PROMPT="General task: $DESCRIPTION

Please analyze the codebase and implement the requested changes:
1. Understand the requirements clearly
2. Follow coding standards and best practices
3. Include tests where appropriate
4. Update documentation if needed
5. Create atomic, complete changes

Project: {{cookiecutter.project_name{{\'}}\'}}
Language: C++{{cookiecutter.cpp_standard{{\'}}\'}}
Build System: {{cookiecutter.build_system | capitalize{{\'}}\'}}
Testing: {{cookiecutter.testing_framework | upper{{\'}}\'}}"
              ;;
          esac

          # Execute Claude Code
          claude -p "$PROMPT" --timeout 600 > claude_results.json 2>claude_error.log || {
            echo "Claude execution failed:"
            cat claude_error.log
            exit 1
          }

          echo "results<<EOF" >> $GITHUB_OUTPUT
          cat claude_results.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate changes
        run: |
          # C++ validation
          {% if cookiecutter.build_system == "cmake" %}
          cmake --build build --config Debug || true
          ctest --test-dir build --output-on-failure --exit-zero || true
          {% else %}
          meson compile -C build || true
          meson test -C build --verbose || true
          {% endif %}

      - name: Commit and push changes
        if: steps.claude.outputs.results != ''
        run: |
          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"

            git add -A

            # Create commit message
            TASK_TYPE="{% raw %}{{ steps.task.outputs.task_type {{\' }}{% endraw %}\'}}"
            DESCRIPTION="{% raw %}{{ steps.task.outputs.task_description {{\' }}{% endraw %}\'}}"
            COMMIT_MSG="AI ($TASK_TYPE): $DESCRIPTION

🤖 Generated with Claude Code AI Automation

Co-Authored-By: Claude <noreply@anthropic.com>"

            git commit -m "$COMMIT_MSG"
            git push

            echo "Changes committed and pushed"
          fi

      - name: Create or update PR
        if: steps.claude.outputs.results != ''
        run: |
          # Check if we're on main branch
          if [ "$(git branch --show-current)" = "main" ]; then
            # Create a new branch for the changes
            PR_BRANCH="ai-automation-{% raw %}{{ github.run_number {{\' }}{% endraw %}\'}}"
            git checkout -b $PR_BRANCH
            git push origin $PR_BRANCH

            # Create PR
            TASK_TYPE="{% raw %}{{ steps.task.outputs.task_type {{\' }}{% endraw %}\'}}"
            DESCRIPTION="{% raw %}{{ steps.task.outputs.task_description {{\' }}{% endraw %}\'}}"
            PR_TITLE="AI Automation: $TASK_TYPE"
            PR_BODY="## 🤖 AI-Generated Pull Request

**Task Type:** $TASK_TYPE
**Description:** $DESCRIPTION

This PR contains automated changes generated by Claude Code AI.

**Changes Made:**
- Automated code implementation based on the task requirements
- Follows project coding standards and best practices
- Includes appropriate tests and documentation

**Technical Details:**
- **Language:** C++{{cookiecutter.cpp_standard{{\'}}\'}}
- **Build System:** {{cookiecutter.build_system | capitalize{{\'}}\'}}
- **Testing:** {{cookiecutter.testing_framework | upper{{\'}}\'}}

**Next Steps:**
1. Review the generated changes
2. Check build and test results
3. Merge if everything looks correct

---

🤖 Generated with [Claude Code](https://claude.com/claude-code)"

            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base main \
              --head "$PR_BRANCH" \
              --label "ai-generated" \
              --draft || true

            echo "Pull request created"
          else
            echo "Already on a feature branch, skipping PR creation"
          fi

      - name: Comment on issue
        if: github.event_name == 'issues' || github.event_name == 'issue_comment'
        run: |
          COMMENT_BODY="## 🤖 AI Automation Complete

I've analyzed your request and implemented the necessary changes.

**Task Type:** {% raw %}{{ steps.task.outputs.task_type {{\' }}{% endraw %}\'}}
**Description:** {% raw %}{{ steps.task.outputs.task_description {{\' }}{% endraw %}\'}}

The AI assistant has processed your request and created changes. [View the changes]({% raw %}{{ github.server_url {{\' }}{% endraw %}\'}}/{% raw %}{{ github.repository {{\' }}{% endraw %}\'}}/pull/{% raw %}{{ steps.pr.outputs.pr_number || '#' {{\' }}{% endraw %}\'}}).

---

Generated with Claude Code AI Automation"

          if [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "issues" ]; then
            gh issue comment {% raw %}{{ github.event.issue.number {{\' }}{% endraw %}\'}} --body "$COMMENT_BODY"
          elif [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "issue_comment" ]; then
            gh issue comment {% raw %}{{ github.event.issue.number {{\' }}{% endraw %}\'}} --body "$COMMENT_BODY"
          fi

      - name: Handle failures
        if: failure()
        run: |
          COMMENT_BODY="## ❌ AI Automation Failed

The automated process encountered an error. Please review the logs and manually address the issue.

**Error:** The AI automation workflow failed during execution.

---

Generated with Claude Code AI Automation"

          if [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "issues" ] || [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "issue_comment" ]; then
            if [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "issues" ]; then
              gh issue comment {% raw %}{{ github.event.issue.number {{\' }}{% endraw %}\'}} --body "$COMMENT_BODY"
            elif [ "{% raw %}{{ github.event_name {{\' }}{% endraw %}\'}}" == "issue_comment" ]; then
              gh issue comment {% raw %}{{ github.event.issue.number {{\' }}{% endraw %}\'}} --body "$COMMENT_BODY"
            fi
          fi