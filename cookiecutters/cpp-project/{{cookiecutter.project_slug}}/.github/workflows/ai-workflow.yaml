name: C++ AI Automated PR Creation Workflow

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened, edited, labeled]

jobs:
  ai-pr-creation:
    runs-on: ubuntu-latest
    if: {% raw %}{{ contains(github.event.comment?.body, '/claude') || contains(github.event.issue?.body, '/claude') || (github.event.label.name == 'ai-automate') }}{% endraw %}

    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup C++ Environment
      uses: jokh38/cpp-dev-setup@v1
      with:
        cpp-standard: {{cookiecutter.cpp_standard}}
        build-system: {{cookiecutter.build_system}}
        use-ninja: {{cookiecutter.use_ninja}}

    - name: Install Claude Code CLI
      run: |
        pip install @anthropic-ai/claude-code

    - name: Extract AI Command
      id: extract-command
      run: |
        if [ "${% raw %}{{ github.event_name }}{% endraw %}" = "issue_comment" ]; then
          BODY="${% raw %}{{ github.event.comment.body }}{% endraw %}"
        elif [ "${% raw %}{{ github.event_name }}{% endraw %}" = "issues" ]; then
          BODY="${% raw %}{{ github.event.issue.body }}{% endraw %}"
        else
          BODY=""
        fi

        echo "Extracting command from: $BODY"

        # Extract the command after /claude
        if [[ $BODY =~ \/claude\ (add-feature|fix-issue|refactor-code)(.*) ]]; then
          COMMAND="${BASH_REMATCH[1]}"
          DESCRIPTION="${BASH_REMATCH[2]}"
          echo "command=$COMMAND" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "Found command: $COMMAND"
          echo "Description: $DESCRIPTION"
        else
          echo "No valid /claude command found"
          exit 1
        fi

    - name: Load AI Context
      id: load-context
      run: |
        if [ -f ".github/claude/CLAUDE.md" ]; then
          echo "context_file=.github/claude/CLAUDE.md" >> $GITHUB_OUTPUT
          echo "Found CLAUDE.md context file"
        else
          echo "No CLAUDE.md found, using default context"
          echo "context_file=" >> $GITHUB_OUTPUT
        fi

    - name: Configure Build
      run: |
        {% if cookiecutter.build_system == "cmake" %}
        cmake -B build {% if cookiecutter.use_ninja == "yes" %}-G Ninja{% endif %}
        {% else %}
        meson setup build
        {% endif %}

    - name: Execute AI Task
      id: ai-task
      run: |
        set -e

        # Prepare AI context
        CONTEXT_ARG=""
        if [ -n "${{ steps.load-context.outputs.context_file }}" ]; then
          CONTEXT_ARG="--system-prompt \"$(cat ${{ steps.load-context.outputs.context_file }})\""
        fi

        # Build the AI prompt based on command type
        case "${{ steps.extract-command.outputs.command }}" in
          "add-feature")
            PROMPT="Implement the following feature: ${{ steps.extract-command.outputs.description }}

Follow the AI AUTOMATED PR CREATION WORKFLOW:
1. Analyze the feature requirements
2. Generate C++ code and unit tests simultaneously
3. Run local quality validation (format, build, test)
4. Create atomic commit
5. Create pull request

Project: {% raw %}{{ github.repository }}{% endraw %}
Language: C++{{cookiecutter.cpp_standard}}
Build System: {{cookiecutter.build_system | capitalize}}
Testing: {{cookiecutter.testing_framework | upper}}
Context: ${{ steps.extract-command.outputs.description }}"
            ;;
          "fix-issue")
            PROMPT="Fix the following issue: ${{ steps.extract-command.outputs.description }}

Follow the AI AUTOMATED PR CREATION WORKFLOW:
1. Analyze the issue requirements
2. Generate C++ fix and regression tests simultaneously
3. Run local quality validation (format, build, test)
4. Create atomic commit
5. Create pull request

Project: {% raw %}{{ github.repository }}{% endraw %}
Language: C++{{cookiecutter.cpp_standard}}
Build System: {{cookiecutter.build_system | capitalize}}
Testing: {{cookiecutter.testing_framework | upper}}
Issue: ${{ steps.extract-command.outputs.description }}"
            ;;
          "refactor-code")
            PROMPT="Refactor C++ code according to quality standards: ${{ steps.extract-command.outputs.description }}

Follow the AI AUTOMATED PR CREATION WORKFLOW:
1. Analyze refactoring requirements
2. Refactor C++ code and update tests
3. Run local quality validation (format, build, test)
4. Create atomic commit
5. Create pull request

Project: {% raw %}{{ github.repository }}{% endraw %}
Language: C++{{cookiecutter.cpp_standard}}
Build System: {{cookiecutter.build_system | capitalize}}
Testing: {{cookiecutter.testing_framework | upper}}
Refactoring: ${{ steps.extract-command.outputs.description }}"
            ;;
        esac

        echo "Executing AI task with command: ${{ steps.extract-command.outputs.command }}"

        # Execute using Claude Code with Haiku model for efficiency
        claude --model haiku -p "$PROMPT" --output-format json > ai_result.json

        # Check if AI task was successful
        if [ $? -eq 0 ]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "AI task completed successfully"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "AI task failed"
        fi

    - name: Create Pull Request
      if: steps.ai-task.outputs.success == 'true'
      run: |
        # Check if there are changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create feature branch
          BRANCH_NAME="ai-${{ steps.extract-command.outputs.command }}-$(date +%s)"
          git checkout -b $BRANCH_NAME

          # Add changes
          git add .

          # Create atomic commit
          COMMIT_MSG="${{ steps.extract-command.outputs.command }}: ${{ steps.extract-command.outputs.description }}

          ü§ñ Generated with Claude Code AI Automation

          - Command: /claude ${{ steps.extract-command.outputs.command }}
          - Description: ${{ steps.extract-command.outputs.description }}
          - Model: haiku
          - Language: C++{{cookiecutter.cpp_standard}}"

          git commit -m "$COMMIT_MSG"

          # Push to remote
          git push -u origin $BRANCH_NAME

          # Create pull request
          gh pr create \
            --title "AI ${{ steps.extract-command.outputs.command }}: ${{ steps.extract-command.outputs.description }}" \
            --body "## ü§ñ AI-Generated Pull Request

### Command
\`/claude ${{ steps.extract-command.outputs.command }}\`

### Description
${{ steps.extract-command.outputs.description }}

### Changes
This PR was automatically generated by Claude Code AI following the **AI AUTOMATED PR CREATION WORKFLOW**:

1. ‚úÖ **Command Analysis**: Extracted task requirements
2. ‚úÖ **Code & Test Generation**: Implemented C++ solution with tests
3. ‚úÖ **Local Quality Validation**: Passed formatting, build, and testing
4. ‚úÖ **Atomic Commit**: Created single commit with all changes
5. ‚úÖ **PR Creation**: Generated this pull request

### Technical Details
- **Language**: C++{{cookiecutter.cpp_standard}}
- **Build System**: {{cookiecutter.build_system | capitalize}}
- **Testing**: {{cookiecutter.testing_framework | upper}}
- **Claude Model**: haiku (optimized for speed)
- **Context**: .github/claude/CLAUDE.md

### Validation Status
- **Formatting**: ‚úÖ Passed (clang-format)
- **Build**: ‚úÖ Passed
- **Testing**: ‚úÖ Passed

---
*Generated by Claude Code AI Automation System*" \
            --base main \
            --head $BRANCH_NAME

          echo "Pull request created successfully"
        else
          echo "No changes to commit"
        fi

    - name: Comment on Issue/PR
      if: always()
      run: |
        if [ "${{ steps.ai-task.outputs.success }}" == "true" ]; then
          COMMENT="‚úÖ **AI Task Completed Successfully**

**Command**: \`/claude ${{ steps.extract-command.outputs.command }}\`
**Description**: ${{ steps.extract-command.outputs.description }}

The AI has analyzed your request and created a pull request with the C++ implementation.

**Technical Details**:
- **Language**: C++{{cookiecutter.cpp_standard}}
- **Build System**: {{cookiecutter.build_system | capitalize}}
- **Testing**: {{cookiecutter.testing_framework | upper}}

**Next Steps**:
1. Review the generated pull request
2. Check build and test results
3. Merge if the changes look correct

ü§ñ *Generated by Claude Code AI Automation*"
        else
          COMMENT="‚ùå **AI Task Failed**

**Command**: \`/claude ${{ steps.extract-command.outputs.command }}\`
**Description**: ${{ steps.extract-command.outputs.description }}

The AI encountered an error while processing your request. Please check the workflow logs for details.

**Troubleshooting**:
1. Verify your command format is correct
2. Check if the requirements are clear
3. Try breaking down complex requests into smaller tasks

ü§ñ *Generated by Claude Code AI Automation*"
        fi

        # Post comment based on event type
        if [ "${% raw %}{{ github.event_name }}{% endraw %}" = "issue_comment" ]; then
          gh issue comment {% raw %}{{ github.event.issue.number }}{% endraw %} --body "$COMMENT"
        elif [ "${% raw %}{{ github.event_name }}{% endraw %}" = "issues" ]; then
          gh issue comment {% raw %}{{ github.event.issue.number }}{% endraw %} --body "$COMMENT"
        fi