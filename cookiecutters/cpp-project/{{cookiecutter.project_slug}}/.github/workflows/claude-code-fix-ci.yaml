name: AI CI Failure Fix

on:
  workflow_run:
    workflows: ["CI", "Python CI", "C++ CI", "Build", "Test"]
    types: [failed]
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: 'ID of the failed workflow run to fix'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: true

jobs:
  analyze-failure:
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get workflow run details
        id: workflow-details
        run: |
          WORKFLOW_RUN_ID="${{ github.event.workflow_run.id || github.event.inputs.workflow_run_id }}"

          # Get workflow run details
          WORKFLOW_INFO=$(gh api repos/${{ github.repository }}/actions/runs/$WORKFLOW_RUN_ID)

          echo "workflow_name=$(echo "$WORKFLOW_INFO" | jq -r '.name')" >> $GITHUB_OUTPUT
          echo "head_branch=$(echo "$WORKFLOW_INFO" | jq -r '.head_branch')" >> $GITHUB_OUTPUT
          echo "head_sha=$(echo "$WORKFLOW_INFO" | jq -r '.head_sha')" >> $GITHUB_OUTPUT
          echo "workflow_run_id=$WORKFLOW_RUN_ID" >> $GITHUB_OUTPUT

      - name: Get failed jobs and logs
        id: failure-analysis
        run: |
          WORKFLOW_RUN_ID="${{ steps.workflow-details.outputs.workflow_run_id }}"

          # Get all jobs for the workflow run
          JOBS=$(gh api repos/${{ github.repository }}/actions/runs/$WORKFLOW_RUN_ID/jobs)

          # Extract failed jobs and their logs
          FAILED_JOBS=$(echo "$JOBS" | jq -r '.jobs[] | select(.conclusion == "failure") | {name: .name, html_url: .html_url, id: .id}')

          echo "Failed jobs found:"
          echo "$FAILED_JOBS"

          # Get logs for each failed job
          ERROR_LOGS=""
          for job_id in $(echo "$FAILED_JOBS" | jq -r '.id'); do
            echo "Getting logs for job $job_id..."
            JOB_LOGS=$(gh api repos/${{ github.repository }}/actions/jobs/$job_id/logs --accept "application/vnd.github.v3+json")
            ERROR_LOGS="$ERROR_LOGS

            === Job ID: $job_id ===
            $JOB_LOGS"
          done

          # Save logs to file
          echo "$ERROR_LOGS" > failed_ci_logs.txt

          echo "error_logs_file=failed_ci_logs.txt" >> $GITHUB_OUTPUT
          echo "failed_jobs_count=$(echo "$FAILED_JOBS" | jq '. | length')" >> $GITHUB_OUTPUT

      - name: Switch to failed branch
        run: |
          git checkout ${{ steps.workflow-details.outputs.head_branch }}
          git pull origin ${{ steps.workflow-details.outputs.head_branch }}

      - name: Setup environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Claude Code CLI
        run: |
          pip install @anthropic-ai/claude-code

      - name: Setup project environment
        run: |
          {% if cookiecutter.python_version %}
          # Python project setup
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "pyproject.toml" ]; then
            pip install -e .
          fi
          {% elif cookiecutter.cpp_standard %}
          # C++ project setup
          {% if cookiecutter.build_system == "cmake" %}
          cmake -B build -DCMAKE_BUILD_TYPE=Debug
          {% else %}
          meson setup build
          {% endif %}
          {% endif %}

      - name: Run Claude Code to fix failures
        id: claude-fix
        run: |
          WORKFLOW_NAME="${{ steps.workflow-details.outputs.workflow_name }}"
          BRANCH="${{ steps.workflow-details.outputs.head_branch }}"
          FAILED_JOBS="${{ steps.failure-analysis.outputs.failed_jobs_count }}"

          FIX_PROMPT="You are an AI assistant specialized in fixing CI/CD pipeline failures.

**FAILURE ANALYSIS:**
Workflow: $WORKFLOW_NAME
Branch: $BRANCH
Failed Jobs: $FAILED_JOBS
Run ID: ${{ github.run_id }}

**ERROR LOGS:**
The CI/CD pipeline failed with the following errors. Please analyze the error logs provided and implement comprehensive fixes.

$(cat failed_ci_logs.txt)

**TASK:**
Please analyze the CI failure logs and implement fixes:

1. **Error Analysis**: Identify the root causes of the failures
2. **Implement Fixes**: Make necessary code changes to resolve the issues
3. **Test Validation**: Ensure fixes don't break existing functionality
4. **CI Compatibility**: Ensure changes will pass the CI pipeline

**PROJECT CONTEXT:**
This is a {% if cookiecutter.python_version %}Python {{cookiecutter.python_version}}{% else %}C++{{cookiecutter.cpp_standard}}{% endif %} project named {{cookiecutter.project_name}} with description: {{cookiecutter.project_description}}.

**Build System:**
{% if cookiecutter.python_version %}
- Python with standard tooling (pytest, ruff, mypy)
{% elif cookiecutter.build_system == "cmake" %}
- CMake build system
{% else %}
- Meson build system
{% endif %}

Please implement the fixes and provide a summary of changes made."

          # Execute Claude Code fix
          claude -p "$FIX_PROMPT" --timeout 900 > fix_results.json 2>fix_error.log || {
            echo "Claude fix failed:"
            cat fix_error.log
            exit 1
          }

          echo "results<<EOF" >> $GITHUB_OUTPUT
          cat fix_results.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Apply fixes and commit
        if: steps.claude-fix.outputs.results != ''
        run: |
          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"

            git add -A

            FIX_SUMMARY="Fix CI failures in ${{ steps.workflow-details.outputs.workflow_name }}"
            if [ -f "fix_results.json" ]; then
              FIX_SUMMARY=$(cat fix_results.json | head -n 1)
            fi

            git commit -m "fix: $FIX_SUMMARY

🤖 Generated with Claude Code CI Failure Fix

Co-Authored-By: Claude <noreply@anthropic.com>"

            git push origin ${{ steps.workflow-details.outputs.head_branch }}

            echo "Changes committed and pushed"
          fi

      - name: Trigger CI validation
        if: steps.claude-fix.outputs.results != ''
        run: |
          # Trigger the same workflow that failed to validate the fixes
          gh workflow run "${{ steps.workflow-details.outputs.workflow_name }}" \
            --ref "${{ steps.workflow-details.outputs.head_branch }}"

      - name: Create fix PR if on main branch
        if: |
          steps.claude-fix.outputs.results != '' &&
          steps.workflow-details.outputs.head_branch == 'main'
        run: |
          # Create a new branch for the fixes
          FIX_BRANCH="ci-fix-${{ github.run_number }}"
          git checkout -b $FIX_BRANCH
          git push origin $FIX_BRANCH

          # Create PR
          PR_TITLE="🤖 CI Failure Fix: ${{ steps.workflow-details.outputs.workflow_name }}"
          PR_BODY=$(cat <<EOF
          ## 🛠️ Automated CI Failure Fix

          This PR contains automated fixes for failures in the `${{ steps.workflow-details.outputs.workflow_name }}` workflow.

          **Original Failure:**
          - Workflow Run: [#${{ steps.workflow-details.outputs.workflow_run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ steps.workflow-details.outputs.workflow_run_id }})
          - Branch: `${{ steps.workflow-details.outputs.head_branch }}`
          - Commit: `${{ steps.workflow-details.outputs.head_sha }}`
          - Failed Jobs: ${{ steps.failure-analysis.outputs.failed_jobs_count }}

          **Applied Fixes:**
          $(cat fix_results.json | sed 's/^/- /')

          **Next Steps:**
          1. Review the applied fixes
          2. Ensure all tests pass
          3. Merge if everything looks good

          ---

          🤖 Generated with [Claude Code](https://claude.com/claude-code) CI Failure Fix
          EOF
          )

          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "$FIX_BRANCH" \
            --label "ci-fix,ai-generated"

      - name: Notify on failure
        if: failure()
        run: |
          echo "CI fix automation failed. Manual intervention required."
          echo "Please check the workflow logs for details."